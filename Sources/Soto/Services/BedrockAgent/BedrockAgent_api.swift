//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS BedrockAgent service.
///
/// An example service, deployed with the Octane Service creator,
/// which will echo the string
public struct BedrockAgent: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the BedrockAgent client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "BedrockAgent",
            serviceIdentifier: "bedrock-agent",
            signingName: "bedrock",
            serviceProtocol: .restjson,
            apiVersion: "2023-06-05",
            endpoint: endpoint,
            errorType: BedrockAgentErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Associate a Knowledge Base to an existing Amazon Bedrock Agent
    @Sendable
    public func associateAgentKnowledgeBase(_ input: AssociateAgentKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateAgentKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "AssociateAgentKnowledgeBase", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Bedrock Agent
    @Sendable
    public func createAgent(_ input: CreateAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAgentResponse {
        return try await self.client.execute(
            operation: "CreateAgent", 
            path: "/agents/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Action Group for existing Amazon Bedrock Agent
    @Sendable
    public func createAgentActionGroup(_ input: CreateAgentActionGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAgentActionGroupResponse {
        return try await self.client.execute(
            operation: "CreateAgentActionGroup", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Alias for an existing Amazon Bedrock Agent
    @Sendable
    public func createAgentAlias(_ input: CreateAgentAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAgentAliasResponse {
        return try await self.client.execute(
            operation: "CreateAgentAlias", 
            path: "/agents/{agentId}/agentaliases/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new data source
    @Sendable
    public func createDataSource(_ input: CreateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataSourceResponse {
        return try await self.client.execute(
            operation: "CreateDataSource", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new knowledge base
    @Sendable
    public func createKnowledgeBase(_ input: CreateKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "CreateKnowledgeBase", 
            path: "/knowledgebases/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Agent for existing Amazon Bedrock Agent
    @Sendable
    public func deleteAgent(_ input: DeleteAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAgentResponse {
        return try await self.client.execute(
            operation: "DeleteAgent", 
            path: "/agents/{agentId}/", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Action Group for existing Amazon Bedrock Agent.
    @Sendable
    public func deleteAgentActionGroup(_ input: DeleteAgentActionGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAgentActionGroupResponse {
        return try await self.client.execute(
            operation: "DeleteAgentActionGroup", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Alias for a Amazon Bedrock Agent
    @Sendable
    public func deleteAgentAlias(_ input: DeleteAgentAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAgentAliasResponse {
        return try await self.client.execute(
            operation: "DeleteAgentAlias", 
            path: "/agents/{agentId}/agentaliases/{agentAliasId}/", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Agent version for existing Amazon Bedrock Agent
    @Sendable
    public func deleteAgentVersion(_ input: DeleteAgentVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAgentVersionResponse {
        return try await self.client.execute(
            operation: "DeleteAgentVersion", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an existing data source
    @Sendable
    public func deleteDataSource(_ input: DeleteDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataSourceResponse {
        return try await self.client.execute(
            operation: "DeleteDataSource", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an existing knowledge base
    @Sendable
    public func deleteKnowledgeBase(_ input: DeleteKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "DeleteKnowledgeBase", 
            path: "/knowledgebases/{knowledgeBaseId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociate an existing Knowledge Base from an Amazon Bedrock Agent
    @Sendable
    public func disassociateAgentKnowledgeBase(_ input: DisassociateAgentKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateAgentKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "DisassociateAgentKnowledgeBase", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Agent for existing Amazon Bedrock Agent
    @Sendable
    public func getAgent(_ input: GetAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAgentResponse {
        return try await self.client.execute(
            operation: "GetAgent", 
            path: "/agents/{agentId}/", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Action Group for existing Amazon Bedrock Agent Version
    @Sendable
    public func getAgentActionGroup(_ input: GetAgentActionGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAgentActionGroupResponse {
        return try await self.client.execute(
            operation: "GetAgentActionGroup", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an Alias for a Amazon Bedrock Agent
    @Sendable
    public func getAgentAlias(_ input: GetAgentAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAgentAliasResponse {
        return try await self.client.execute(
            operation: "GetAgentAlias", 
            path: "/agents/{agentId}/agentaliases/{agentAliasId}/", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a knowledge base associated to an existing Amazon Bedrock Agent Version
    @Sendable
    public func getAgentKnowledgeBase(_ input: GetAgentKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAgentKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "GetAgentKnowledgeBase", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Agent version for existing Amazon Bedrock Agent
    @Sendable
    public func getAgentVersion(_ input: GetAgentVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAgentVersionResponse {
        return try await self.client.execute(
            operation: "GetAgentVersion", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get an existing data source
    @Sendable
    public func getDataSource(_ input: GetDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceResponse {
        return try await self.client.execute(
            operation: "GetDataSource", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get an ingestion job
    @Sendable
    public func getIngestionJob(_ input: GetIngestionJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIngestionJobResponse {
        return try await self.client.execute(
            operation: "GetIngestionJob", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get an existing knowledge base
    @Sendable
    public func getKnowledgeBase(_ input: GetKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "GetKnowledgeBase", 
            path: "/knowledgebases/{knowledgeBaseId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists an Action Group for existing Amazon Bedrock Agent Version
    @Sendable
    public func listAgentActionGroups(_ input: ListAgentActionGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAgentActionGroupsResponse {
        return try await self.client.execute(
            operation: "ListAgentActionGroups", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the Aliases for an Amazon Bedrock Agent
    @Sendable
    public func listAgentAliases(_ input: ListAgentAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAgentAliasesResponse {
        return try await self.client.execute(
            operation: "ListAgentAliases", 
            path: "/agents/{agentId}/agentaliases/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List of Knowledge Bases associated to an existing Amazon Bedrock Agent Version
    @Sendable
    public func listAgentKnowledgeBases(_ input: ListAgentKnowledgeBasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAgentKnowledgeBasesResponse {
        return try await self.client.execute(
            operation: "ListAgentKnowledgeBases", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Agent Versions
    @Sendable
    public func listAgentVersions(_ input: ListAgentVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAgentVersionsResponse {
        return try await self.client.execute(
            operation: "ListAgentVersions", 
            path: "/agents/{agentId}/agentversions/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Agents
    @Sendable
    public func listAgents(_ input: ListAgentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAgentsResponse {
        return try await self.client.execute(
            operation: "ListAgents", 
            path: "/agents/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List data sources
    @Sendable
    public func listDataSources(_ input: ListDataSourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourcesResponse {
        return try await self.client.execute(
            operation: "ListDataSources", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List ingestion jobs
    @Sendable
    public func listIngestionJobs(_ input: ListIngestionJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIngestionJobsResponse {
        return try await self.client.execute(
            operation: "ListIngestionJobs", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List Knowledge Bases
    @Sendable
    public func listKnowledgeBases(_ input: ListKnowledgeBasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListKnowledgeBasesResponse {
        return try await self.client.execute(
            operation: "ListKnowledgeBases", 
            path: "/knowledgebases/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List tags for a resource
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Prepares an existing Amazon Bedrock Agent to receive runtime requests
    @Sendable
    public func prepareAgent(_ input: PrepareAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PrepareAgentResponse {
        return try await self.client.execute(
            operation: "PrepareAgent", 
            path: "/agents/{agentId}/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Start a new ingestion job
    @Sendable
    public func startIngestionJob(_ input: StartIngestionJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartIngestionJobResponse {
        return try await self.client.execute(
            operation: "StartIngestionJob", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tag a resource
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Untag a resource
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Amazon Bedrock Agent
    @Sendable
    public func updateAgent(_ input: UpdateAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAgentResponse {
        return try await self.client.execute(
            operation: "UpdateAgent", 
            path: "/agents/{agentId}/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Action Group for Amazon Bedrock Agent
    @Sendable
    public func updateAgentActionGroup(_ input: UpdateAgentActionGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAgentActionGroupResponse {
        return try await self.client.execute(
            operation: "UpdateAgentActionGroup", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Alias for an Amazon Bedrock Agent
    @Sendable
    public func updateAgentAlias(_ input: UpdateAgentAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAgentAliasResponse {
        return try await self.client.execute(
            operation: "UpdateAgentAlias", 
            path: "/agents/{agentId}/agentaliases/{agentAliasId}/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Knowledge Base associated to an Amazon Bedrock Agent
    @Sendable
    public func updateAgentKnowledgeBase(_ input: UpdateAgentKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAgentKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "UpdateAgentKnowledgeBase", 
            path: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an existing data source
    @Sendable
    public func updateDataSource(_ input: UpdateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataSourceResponse {
        return try await self.client.execute(
            operation: "UpdateDataSource", 
            path: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an existing knowledge base
    @Sendable
    public func updateKnowledgeBase(_ input: UpdateKnowledgeBaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateKnowledgeBaseResponse {
        return try await self.client.execute(
            operation: "UpdateKnowledgeBase", 
            path: "/knowledgebases/{knowledgeBaseId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension BedrockAgent {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: BedrockAgent, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension BedrockAgent {
    /// Lists an Action Group for existing Amazon Bedrock Agent Version
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAgentActionGroupsPaginator(
        _ input: ListAgentActionGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAgentActionGroupsRequest, ListAgentActionGroupsResponse> {
        return .init(
            input: input,
            command: self.listAgentActionGroups,
            inputKey: \ListAgentActionGroupsRequest.nextToken,
            outputKey: \ListAgentActionGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the Aliases for an Amazon Bedrock Agent
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAgentAliasesPaginator(
        _ input: ListAgentAliasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAgentAliasesRequest, ListAgentAliasesResponse> {
        return .init(
            input: input,
            command: self.listAgentAliases,
            inputKey: \ListAgentAliasesRequest.nextToken,
            outputKey: \ListAgentAliasesResponse.nextToken,
            logger: logger
        )
    }

    /// List of Knowledge Bases associated to an existing Amazon Bedrock Agent Version
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAgentKnowledgeBasesPaginator(
        _ input: ListAgentKnowledgeBasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAgentKnowledgeBasesRequest, ListAgentKnowledgeBasesResponse> {
        return .init(
            input: input,
            command: self.listAgentKnowledgeBases,
            inputKey: \ListAgentKnowledgeBasesRequest.nextToken,
            outputKey: \ListAgentKnowledgeBasesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists Agent Versions
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAgentVersionsPaginator(
        _ input: ListAgentVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAgentVersionsRequest, ListAgentVersionsResponse> {
        return .init(
            input: input,
            command: self.listAgentVersions,
            inputKey: \ListAgentVersionsRequest.nextToken,
            outputKey: \ListAgentVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists Agents
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAgentsPaginator(
        _ input: ListAgentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAgentsRequest, ListAgentsResponse> {
        return .init(
            input: input,
            command: self.listAgents,
            inputKey: \ListAgentsRequest.nextToken,
            outputKey: \ListAgentsResponse.nextToken,
            logger: logger
        )
    }

    /// List data sources
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourcesPaginator(
        _ input: ListDataSourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourcesRequest, ListDataSourcesResponse> {
        return .init(
            input: input,
            command: self.listDataSources,
            inputKey: \ListDataSourcesRequest.nextToken,
            outputKey: \ListDataSourcesResponse.nextToken,
            logger: logger
        )
    }

    /// List ingestion jobs
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIngestionJobsPaginator(
        _ input: ListIngestionJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIngestionJobsRequest, ListIngestionJobsResponse> {
        return .init(
            input: input,
            command: self.listIngestionJobs,
            inputKey: \ListIngestionJobsRequest.nextToken,
            outputKey: \ListIngestionJobsResponse.nextToken,
            logger: logger
        )
    }

    /// List Knowledge Bases
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listKnowledgeBasesPaginator(
        _ input: ListKnowledgeBasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListKnowledgeBasesRequest, ListKnowledgeBasesResponse> {
        return .init(
            input: input,
            command: self.listKnowledgeBases,
            inputKey: \ListKnowledgeBasesRequest.nextToken,
            outputKey: \ListKnowledgeBasesResponse.nextToken,
            logger: logger
        )
    }
}

extension BedrockAgent.ListAgentActionGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListAgentActionGroupsRequest {
        return .init(
            agentId: self.agentId,
            agentVersion: self.agentVersion,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension BedrockAgent.ListAgentAliasesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListAgentAliasesRequest {
        return .init(
            agentId: self.agentId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension BedrockAgent.ListAgentKnowledgeBasesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListAgentKnowledgeBasesRequest {
        return .init(
            agentId: self.agentId,
            agentVersion: self.agentVersion,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension BedrockAgent.ListAgentVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListAgentVersionsRequest {
        return .init(
            agentId: self.agentId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension BedrockAgent.ListAgentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListAgentsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension BedrockAgent.ListDataSourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListDataSourcesRequest {
        return .init(
            knowledgeBaseId: self.knowledgeBaseId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension BedrockAgent.ListIngestionJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListIngestionJobsRequest {
        return .init(
            dataSourceId: self.dataSourceId,
            filters: self.filters,
            knowledgeBaseId: self.knowledgeBaseId,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy
        )
    }
}

extension BedrockAgent.ListKnowledgeBasesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> BedrockAgent.ListKnowledgeBasesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
