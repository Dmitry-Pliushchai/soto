//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.7) && os(Linux)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
import SotoCore

extension BedrockAgent {
    // MARK: Enums

    public enum ActionGroupSignature: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amazonUserinput = "AMAZON.UserInput"
        public var description: String { return self.rawValue }
    }

    public enum ActionGroupState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum AgentAliasStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case failed = "FAILED"
        case prepared = "PREPARED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum AgentStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case failed = "FAILED"
        case notPrepared = "NOT_PREPARED"
        case prepared = "PREPARED"
        case preparing = "PREPARING"
        case updating = "UPDATING"
        case versioning = "VERSIONING"
        public var description: String { return self.rawValue }
    }

    public enum ChunkingStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fixedSize = "FIXED_SIZE"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum CreationMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "DEFAULT"
        case overridden = "OVERRIDDEN"
        public var description: String { return self.rawValue }
    }

    public enum DataSourceStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "AVAILABLE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum DataSourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum IngestionJobFilterAttribute: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case status = "STATUS"
        public var description: String { return self.rawValue }
    }

    public enum IngestionJobFilterOperator: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eq = "EQ"
        public var description: String { return self.rawValue }
    }

    public enum IngestionJobSortByAttribute: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case startedAt = "STARTED_AT"
        case status = "STATUS"
        public var description: String { return self.rawValue }
    }

    public enum IngestionJobStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case complete = "COMPLETE"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case starting = "STARTING"
        public var description: String { return self.rawValue }
    }

    public enum KnowledgeBaseState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum KnowledgeBaseStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case failed = "FAILED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum KnowledgeBaseStorageType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case opensearchServerless = "OPENSEARCH_SERVERLESS"
        case pinecone = "PINECONE"
        case redisEnterpriseCloud = "REDIS_ENTERPRISE_CLOUD"
        public var description: String { return self.rawValue }
    }

    public enum KnowledgeBaseType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case vector = "VECTOR"
        public var description: String { return self.rawValue }
    }

    public enum PromptState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum PromptType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case knowledgeBaseResponseGeneration = "KNOWLEDGE_BASE_RESPONSE_GENERATION"
        case orchestration = "ORCHESTRATION"
        case postProcessing = "POST_PROCESSING"
        case preProcessing = "PRE_PROCESSING"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public enum APISchema: AWSEncodableShape & AWSDecodableShape, Sendable {
        case payload(String)
        case s3(S3Identifier)

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            guard container.allKeys.count == 1, let key = container.allKeys.first else {
                let context = DecodingError.Context(
                    codingPath: container.codingPath,
                    debugDescription: "Expected exactly one key, but got \(container.allKeys.count)"
                )
                throw DecodingError.dataCorrupted(context)
            }
            switch key {
            case .payload:
                let value = try container.decode(String.self, forKey: .payload)
                self = .payload(value)
            case .s3:
                let value = try container.decode(S3Identifier.self, forKey: .s3)
                self = .s3(value)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .payload(let value):
                try container.encode(value, forKey: .payload)
            case .s3(let value):
                try container.encode(value, forKey: .s3)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .s3(let value):
                try value.validate(name: "\(name).s3")
            default:
                break
            }
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case s3 = "s3"
        }
    }

    // MARK: Shapes

    public struct ActionGroupSummary: AWSDecodableShape {
        public let actionGroupId: String
        public let actionGroupName: String
        public let actionGroupState: ActionGroupState
        public let description: String?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(actionGroupId: String, actionGroupName: String, actionGroupState: ActionGroupState, description: String? = nil, updatedAt: Date) {
            self.actionGroupId = actionGroupId
            self.actionGroupName = actionGroupName
            self.actionGroupState = actionGroupState
            self.description = description
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case actionGroupId = "actionGroupId"
            case actionGroupName = "actionGroupName"
            case actionGroupState = "actionGroupState"
            case description = "description"
            case updatedAt = "updatedAt"
        }
    }

    public struct Agent: AWSDecodableShape {
        public let agentArn: String
        public let agentId: String
        public let agentName: String
        public let agentResourceRoleArn: String
        public let agentStatus: AgentStatus
        public let agentVersion: String
        public let clientToken: String?
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let customerEncryptionKeyArn: String?
        public let description: String?
        public let failureReasons: [String]?
        public let foundationModel: String?
        public let idleSessionTTLInSeconds: Int
        public let instruction: String?
        @OptionalCustomCoding<ISO8601DateCoder>
        public var preparedAt: Date?
        public let promptOverrideConfiguration: PromptOverrideConfiguration?
        public let recommendedActions: [String]?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(agentArn: String, agentId: String, agentName: String, agentResourceRoleArn: String, agentStatus: AgentStatus, agentVersion: String, clientToken: String? = nil, createdAt: Date, customerEncryptionKeyArn: String? = nil, description: String? = nil, failureReasons: [String]? = nil, foundationModel: String? = nil, idleSessionTTLInSeconds: Int, instruction: String? = nil, preparedAt: Date? = nil, promptOverrideConfiguration: PromptOverrideConfiguration? = nil, recommendedActions: [String]? = nil, updatedAt: Date) {
            self.agentArn = agentArn
            self.agentId = agentId
            self.agentName = agentName
            self.agentResourceRoleArn = agentResourceRoleArn
            self.agentStatus = agentStatus
            self.agentVersion = agentVersion
            self.clientToken = clientToken
            self.createdAt = createdAt
            self.customerEncryptionKeyArn = customerEncryptionKeyArn
            self.description = description
            self.failureReasons = failureReasons
            self.foundationModel = foundationModel
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.instruction = instruction
            self.preparedAt = preparedAt
            self.promptOverrideConfiguration = promptOverrideConfiguration
            self.recommendedActions = recommendedActions
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentArn = "agentArn"
            case agentId = "agentId"
            case agentName = "agentName"
            case agentResourceRoleArn = "agentResourceRoleArn"
            case agentStatus = "agentStatus"
            case agentVersion = "agentVersion"
            case clientToken = "clientToken"
            case createdAt = "createdAt"
            case customerEncryptionKeyArn = "customerEncryptionKeyArn"
            case description = "description"
            case failureReasons = "failureReasons"
            case foundationModel = "foundationModel"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case instruction = "instruction"
            case preparedAt = "preparedAt"
            case promptOverrideConfiguration = "promptOverrideConfiguration"
            case recommendedActions = "recommendedActions"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentActionGroup: AWSDecodableShape {
        public let actionGroupExecutor: ActionGroupExecutor?
        public let actionGroupId: String
        public let actionGroupName: String
        public let actionGroupState: ActionGroupState
        public let agentId: String
        public let agentVersion: String
        public let apiSchema: APISchema?
        public let clientToken: String?
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let description: String?
        public let parentActionSignature: ActionGroupSignature?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(actionGroupExecutor: ActionGroupExecutor? = nil, actionGroupId: String, actionGroupName: String, actionGroupState: ActionGroupState, agentId: String, agentVersion: String, apiSchema: APISchema? = nil, clientToken: String? = nil, createdAt: Date, description: String? = nil, parentActionSignature: ActionGroupSignature? = nil, updatedAt: Date) {
            self.actionGroupExecutor = actionGroupExecutor
            self.actionGroupId = actionGroupId
            self.actionGroupName = actionGroupName
            self.actionGroupState = actionGroupState
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.apiSchema = apiSchema
            self.clientToken = clientToken
            self.createdAt = createdAt
            self.description = description
            self.parentActionSignature = parentActionSignature
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case actionGroupExecutor = "actionGroupExecutor"
            case actionGroupId = "actionGroupId"
            case actionGroupName = "actionGroupName"
            case actionGroupState = "actionGroupState"
            case agentId = "agentId"
            case agentVersion = "agentVersion"
            case apiSchema = "apiSchema"
            case clientToken = "clientToken"
            case createdAt = "createdAt"
            case description = "description"
            case parentActionSignature = "parentActionSignature"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentAlias: AWSDecodableShape {
        public let agentAliasArn: String
        public let agentAliasHistoryEvents: [AgentAliasHistoryEvent]?
        public let agentAliasId: String
        public let agentAliasName: String
        public let agentAliasStatus: AgentAliasStatus
        public let agentId: String
        public let clientToken: String?
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let description: String?
        public let routingConfiguration: [AgentAliasRoutingConfigurationListItem]
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(agentAliasArn: String, agentAliasHistoryEvents: [AgentAliasHistoryEvent]? = nil, agentAliasId: String, agentAliasName: String, agentAliasStatus: AgentAliasStatus, agentId: String, clientToken: String? = nil, createdAt: Date, description: String? = nil, routingConfiguration: [AgentAliasRoutingConfigurationListItem], updatedAt: Date) {
            self.agentAliasArn = agentAliasArn
            self.agentAliasHistoryEvents = agentAliasHistoryEvents
            self.agentAliasId = agentAliasId
            self.agentAliasName = agentAliasName
            self.agentAliasStatus = agentAliasStatus
            self.agentId = agentId
            self.clientToken = clientToken
            self.createdAt = createdAt
            self.description = description
            self.routingConfiguration = routingConfiguration
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentAliasArn = "agentAliasArn"
            case agentAliasHistoryEvents = "agentAliasHistoryEvents"
            case agentAliasId = "agentAliasId"
            case agentAliasName = "agentAliasName"
            case agentAliasStatus = "agentAliasStatus"
            case agentId = "agentId"
            case clientToken = "clientToken"
            case createdAt = "createdAt"
            case description = "description"
            case routingConfiguration = "routingConfiguration"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentAliasHistoryEvent: AWSDecodableShape {
        @OptionalCustomCoding<ISO8601DateCoder>
        public var endDate: Date?
        public let routingConfiguration: [AgentAliasRoutingConfigurationListItem]?
        @OptionalCustomCoding<ISO8601DateCoder>
        public var startDate: Date?

        public init(endDate: Date? = nil, routingConfiguration: [AgentAliasRoutingConfigurationListItem]? = nil, startDate: Date? = nil) {
            self.endDate = endDate
            self.routingConfiguration = routingConfiguration
            self.startDate = startDate
        }

        private enum CodingKeys: String, CodingKey {
            case endDate = "endDate"
            case routingConfiguration = "routingConfiguration"
            case startDate = "startDate"
        }
    }

    public struct AgentAliasRoutingConfigurationListItem: AWSEncodableShape & AWSDecodableShape {
        public let agentVersion: String

        public init(agentVersion: String) {
            self.agentVersion = agentVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 1)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$")
        }

        private enum CodingKeys: String, CodingKey {
            case agentVersion = "agentVersion"
        }
    }

    public struct AgentAliasSummary: AWSDecodableShape {
        public let agentAliasId: String
        public let agentAliasName: String
        public let agentAliasStatus: AgentAliasStatus
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let description: String?
        public let routingConfiguration: [AgentAliasRoutingConfigurationListItem]?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(agentAliasId: String, agentAliasName: String, agentAliasStatus: AgentAliasStatus, createdAt: Date, description: String? = nil, routingConfiguration: [AgentAliasRoutingConfigurationListItem]? = nil, updatedAt: Date) {
            self.agentAliasId = agentAliasId
            self.agentAliasName = agentAliasName
            self.agentAliasStatus = agentAliasStatus
            self.createdAt = createdAt
            self.description = description
            self.routingConfiguration = routingConfiguration
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentAliasId = "agentAliasId"
            case agentAliasName = "agentAliasName"
            case agentAliasStatus = "agentAliasStatus"
            case createdAt = "createdAt"
            case description = "description"
            case routingConfiguration = "routingConfiguration"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentKnowledgeBase: AWSDecodableShape {
        public let agentId: String
        public let agentVersion: String
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let description: String
        public let knowledgeBaseId: String
        public let knowledgeBaseState: KnowledgeBaseState
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(agentId: String, agentVersion: String, createdAt: Date, description: String, knowledgeBaseId: String, knowledgeBaseState: KnowledgeBaseState, updatedAt: Date) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.createdAt = createdAt
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.knowledgeBaseState = knowledgeBaseState
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case agentVersion = "agentVersion"
            case createdAt = "createdAt"
            case description = "description"
            case knowledgeBaseId = "knowledgeBaseId"
            case knowledgeBaseState = "knowledgeBaseState"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentKnowledgeBaseSummary: AWSDecodableShape {
        public let description: String?
        public let knowledgeBaseId: String
        public let knowledgeBaseState: KnowledgeBaseState
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(description: String? = nil, knowledgeBaseId: String, knowledgeBaseState: KnowledgeBaseState, updatedAt: Date) {
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.knowledgeBaseState = knowledgeBaseState
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case knowledgeBaseId = "knowledgeBaseId"
            case knowledgeBaseState = "knowledgeBaseState"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentSummary: AWSDecodableShape {
        public let agentId: String
        public let agentName: String
        public let agentStatus: AgentStatus
        public let description: String?
        public let latestAgentVersion: String?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(agentId: String, agentName: String, agentStatus: AgentStatus, description: String? = nil, latestAgentVersion: String? = nil, updatedAt: Date) {
            self.agentId = agentId
            self.agentName = agentName
            self.agentStatus = agentStatus
            self.description = description
            self.latestAgentVersion = latestAgentVersion
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case agentName = "agentName"
            case agentStatus = "agentStatus"
            case description = "description"
            case latestAgentVersion = "latestAgentVersion"
            case updatedAt = "updatedAt"
        }
    }

    public struct AgentVersion: AWSDecodableShape {
        public let agentArn: String
        public let agentId: String
        public let agentName: String
        public let agentResourceRoleArn: String
        public let agentStatus: AgentStatus
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let customerEncryptionKeyArn: String?
        public let description: String?
        public let failureReasons: [String]?
        public let foundationModel: String?
        public let idleSessionTTLInSeconds: Int
        public let instruction: String?
        public let promptOverrideConfiguration: PromptOverrideConfiguration?
        public let recommendedActions: [String]?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date
        public let version: String

        public init(agentArn: String, agentId: String, agentName: String, agentResourceRoleArn: String, agentStatus: AgentStatus, createdAt: Date, customerEncryptionKeyArn: String? = nil, description: String? = nil, failureReasons: [String]? = nil, foundationModel: String? = nil, idleSessionTTLInSeconds: Int, instruction: String? = nil, promptOverrideConfiguration: PromptOverrideConfiguration? = nil, recommendedActions: [String]? = nil, updatedAt: Date, version: String) {
            self.agentArn = agentArn
            self.agentId = agentId
            self.agentName = agentName
            self.agentResourceRoleArn = agentResourceRoleArn
            self.agentStatus = agentStatus
            self.createdAt = createdAt
            self.customerEncryptionKeyArn = customerEncryptionKeyArn
            self.description = description
            self.failureReasons = failureReasons
            self.foundationModel = foundationModel
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.instruction = instruction
            self.promptOverrideConfiguration = promptOverrideConfiguration
            self.recommendedActions = recommendedActions
            self.updatedAt = updatedAt
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case agentArn = "agentArn"
            case agentId = "agentId"
            case agentName = "agentName"
            case agentResourceRoleArn = "agentResourceRoleArn"
            case agentStatus = "agentStatus"
            case createdAt = "createdAt"
            case customerEncryptionKeyArn = "customerEncryptionKeyArn"
            case description = "description"
            case failureReasons = "failureReasons"
            case foundationModel = "foundationModel"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case instruction = "instruction"
            case promptOverrideConfiguration = "promptOverrideConfiguration"
            case recommendedActions = "recommendedActions"
            case updatedAt = "updatedAt"
            case version = "version"
        }
    }

    public struct AgentVersionSummary: AWSDecodableShape {
        public let agentName: String
        public let agentStatus: AgentStatus
        public let agentVersion: String
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let description: String?
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(agentName: String, agentStatus: AgentStatus, agentVersion: String, createdAt: Date, description: String? = nil, updatedAt: Date) {
            self.agentName = agentName
            self.agentStatus = agentStatus
            self.agentVersion = agentVersion
            self.createdAt = createdAt
            self.description = description
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentName = "agentName"
            case agentStatus = "agentStatus"
            case agentVersion = "agentVersion"
            case createdAt = "createdAt"
            case description = "description"
            case updatedAt = "updatedAt"
        }
    }

    public struct AssociateAgentKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Draft Version of the Agent.
        public let agentVersion: String
        public let description: String
        public let knowledgeBaseId: String
        public let knowledgeBaseState: KnowledgeBaseState?

        public init(agentId: String, agentVersion: String, description: String, knowledgeBaseId: String, knowledgeBaseState: KnowledgeBaseState? = nil) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.knowledgeBaseState = knowledgeBaseState
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^DRAFT$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case knowledgeBaseId = "knowledgeBaseId"
            case knowledgeBaseState = "knowledgeBaseState"
        }
    }

    public struct AssociateAgentKnowledgeBaseResponse: AWSDecodableShape {
        public let agentKnowledgeBase: AgentKnowledgeBase

        public init(agentKnowledgeBase: AgentKnowledgeBase) {
            self.agentKnowledgeBase = agentKnowledgeBase
        }

        private enum CodingKeys: String, CodingKey {
            case agentKnowledgeBase = "agentKnowledgeBase"
        }
    }

    public struct ChunkingConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let chunkingStrategy: ChunkingStrategy
        public let fixedSizeChunkingConfiguration: FixedSizeChunkingConfiguration?

        public init(chunkingStrategy: ChunkingStrategy, fixedSizeChunkingConfiguration: FixedSizeChunkingConfiguration? = nil) {
            self.chunkingStrategy = chunkingStrategy
            self.fixedSizeChunkingConfiguration = fixedSizeChunkingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case chunkingStrategy = "chunkingStrategy"
            case fixedSizeChunkingConfiguration = "fixedSizeChunkingConfiguration"
        }
    }

    public struct CreateAgentActionGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        public let actionGroupExecutor: ActionGroupExecutor?
        public let actionGroupName: String
        public let actionGroupState: ActionGroupState?
        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Draft Version of the Agent.
        public let agentVersion: String
        public let apiSchema: APISchema?
        public let clientToken: String?
        public let description: String?
        public let parentActionGroupSignature: ActionGroupSignature?

        public init(actionGroupExecutor: ActionGroupExecutor? = nil, actionGroupName: String, actionGroupState: ActionGroupState? = nil, agentId: String, agentVersion: String, apiSchema: APISchema? = nil, clientToken: String? = CreateAgentActionGroupRequest.idempotencyToken(), description: String? = nil, parentActionGroupSignature: ActionGroupSignature? = nil) {
            self.actionGroupExecutor = actionGroupExecutor
            self.actionGroupName = actionGroupName
            self.actionGroupState = actionGroupState
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.apiSchema = apiSchema
            self.clientToken = clientToken
            self.description = description
            self.parentActionGroupSignature = parentActionGroupSignature
        }

        public func validate(name: String) throws {
            try self.actionGroupExecutor?.validate(name: "\(name).actionGroupExecutor")
            try self.validate(self.actionGroupName, name: "actionGroupName", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^DRAFT$")
            try self.apiSchema?.validate(name: "\(name).apiSchema")
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 256)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case actionGroupExecutor = "actionGroupExecutor"
            case actionGroupName = "actionGroupName"
            case actionGroupState = "actionGroupState"
            case apiSchema = "apiSchema"
            case clientToken = "clientToken"
            case description = "description"
            case parentActionGroupSignature = "parentActionGroupSignature"
        }
    }

    public struct CreateAgentActionGroupResponse: AWSDecodableShape {
        public let agentActionGroup: AgentActionGroup

        public init(agentActionGroup: AgentActionGroup) {
            self.agentActionGroup = agentActionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case agentActionGroup = "agentActionGroup"
        }
    }

    public struct CreateAgentAliasRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        public let agentAliasName: String
        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let clientToken: String?
        public let description: String?
        public let routingConfiguration: [AgentAliasRoutingConfigurationListItem]?
        public let tags: [String: String]?

        public init(agentAliasName: String, agentId: String, clientToken: String? = CreateAgentAliasRequest.idempotencyToken(), description: String? = nil, routingConfiguration: [AgentAliasRoutingConfigurationListItem]? = nil, tags: [String: String]? = nil) {
            self.agentAliasName = agentAliasName
            self.agentId = agentId
            self.clientToken = clientToken
            self.description = description
            self.routingConfiguration = routingConfiguration
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.agentAliasName, name: "agentAliasName", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 256)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.routingConfiguration?.forEach {
                try $0.validate(name: "\(name).routingConfiguration[]")
            }
            try self.validate(self.routingConfiguration, name: "routingConfiguration", parent: name, max: 1)
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.key, name: "tags.key", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case agentAliasName = "agentAliasName"
            case clientToken = "clientToken"
            case description = "description"
            case routingConfiguration = "routingConfiguration"
            case tags = "tags"
        }
    }

    public struct CreateAgentAliasResponse: AWSDecodableShape {
        public let agentAlias: AgentAlias

        public init(agentAlias: AgentAlias) {
            self.agentAlias = agentAlias
        }

        private enum CodingKeys: String, CodingKey {
            case agentAlias = "agentAlias"
        }
    }

    public struct CreateAgentRequest: AWSEncodableShape {
        public let agentName: String
        public let agentResourceRoleArn: String
        public let clientToken: String?
        public let customerEncryptionKeyArn: String?
        public let description: String?
        public let foundationModel: String?
        public let idleSessionTTLInSeconds: Int?
        public let instruction: String?
        public let promptOverrideConfiguration: PromptOverrideConfiguration?
        public let tags: [String: String]?

        public init(agentName: String, agentResourceRoleArn: String, clientToken: String? = CreateAgentRequest.idempotencyToken(), customerEncryptionKeyArn: String? = nil, description: String? = nil, foundationModel: String? = nil, idleSessionTTLInSeconds: Int? = nil, instruction: String? = nil, promptOverrideConfiguration: PromptOverrideConfiguration? = nil, tags: [String: String]? = nil) {
            self.agentName = agentName
            self.agentResourceRoleArn = agentResourceRoleArn
            self.clientToken = clientToken
            self.customerEncryptionKeyArn = customerEncryptionKeyArn
            self.description = description
            self.foundationModel = foundationModel
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.instruction = instruction
            self.promptOverrideConfiguration = promptOverrideConfiguration
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.agentName, name: "agentName", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.agentResourceRoleArn, name: "agentResourceRoleArn", parent: name, max: 2048)
            try self.validate(self.agentResourceRoleArn, name: "agentResourceRoleArn", parent: name, pattern: "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?AmazonBedrockExecutionRoleForAgents.+$")
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 256)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.validate(self.customerEncryptionKeyArn, name: "customerEncryptionKeyArn", parent: name, max: 2048)
            try self.validate(self.customerEncryptionKeyArn, name: "customerEncryptionKeyArn", parent: name, min: 1)
            try self.validate(self.customerEncryptionKeyArn, name: "customerEncryptionKeyArn", parent: name, pattern: "^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.foundationModel, name: "foundationModel", parent: name, max: 2048)
            try self.validate(self.foundationModel, name: "foundationModel", parent: name, min: 1)
            try self.validate(self.foundationModel, name: "foundationModel", parent: name, pattern: "(^[a-zA-Z0-9-_.]+$)|(^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:(([0-9]{12}:custom-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}/[a-z0-9]{12})|(:foundation-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}))$)|(^([0-9a-zA-Z][_-]?)+$)|^([a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63})$")
            try self.validate(self.idleSessionTTLInSeconds, name: "idleSessionTTLInSeconds", parent: name, max: 3600)
            try self.validate(self.idleSessionTTLInSeconds, name: "idleSessionTTLInSeconds", parent: name, min: 60)
            try self.validate(self.instruction, name: "instruction", parent: name, max: 1200)
            try self.validate(self.instruction, name: "instruction", parent: name, min: 40)
            try self.promptOverrideConfiguration?.validate(name: "\(name).promptOverrideConfiguration")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.key, name: "tags.key", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case agentName = "agentName"
            case agentResourceRoleArn = "agentResourceRoleArn"
            case clientToken = "clientToken"
            case customerEncryptionKeyArn = "customerEncryptionKeyArn"
            case description = "description"
            case foundationModel = "foundationModel"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case instruction = "instruction"
            case promptOverrideConfiguration = "promptOverrideConfiguration"
            case tags = "tags"
        }
    }

    public struct CreateAgentResponse: AWSDecodableShape {
        public let agent: Agent

        public init(agent: Agent) {
            self.agent = agent
        }

        private enum CodingKeys: String, CodingKey {
            case agent = "agent"
        }
    }

    public struct CreateDataSourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let clientToken: String?
        public let dataSourceConfiguration: DataSourceConfiguration
        public let description: String?
        public let knowledgeBaseId: String
        public let name: String
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
        public let vectorIngestionConfiguration: VectorIngestionConfiguration?

        public init(clientToken: String? = CreateDataSourceRequest.idempotencyToken(), dataSourceConfiguration: DataSourceConfiguration, description: String? = nil, knowledgeBaseId: String, name: String, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil, vectorIngestionConfiguration: VectorIngestionConfiguration? = nil) {
            self.clientToken = clientToken
            self.dataSourceConfiguration = dataSourceConfiguration
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.vectorIngestionConfiguration = vectorIngestionConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 256)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.dataSourceConfiguration.validate(name: "\(name).dataSourceConfiguration")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.name, name: "name", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.serverSideEncryptionConfiguration?.validate(name: "\(name).serverSideEncryptionConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case dataSourceConfiguration = "dataSourceConfiguration"
            case description = "description"
            case name = "name"
            case serverSideEncryptionConfiguration = "serverSideEncryptionConfiguration"
            case vectorIngestionConfiguration = "vectorIngestionConfiguration"
        }
    }

    public struct CreateDataSourceResponse: AWSDecodableShape {
        public let dataSource: DataSource

        public init(dataSource: DataSource) {
            self.dataSource = dataSource
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
        }
    }

    public struct CreateKnowledgeBaseRequest: AWSEncodableShape {
        public let clientToken: String?
        public let description: String?
        public let knowledgeBaseConfiguration: KnowledgeBaseConfiguration
        public let name: String
        public let roleArn: String
        public let storageConfiguration: StorageConfiguration
        public let tags: [String: String]?

        public init(clientToken: String? = CreateKnowledgeBaseRequest.idempotencyToken(), description: String? = nil, knowledgeBaseConfiguration: KnowledgeBaseConfiguration, name: String, roleArn: String, storageConfiguration: StorageConfiguration, tags: [String: String]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.knowledgeBaseConfiguration = knowledgeBaseConfiguration
            self.name = name
            self.roleArn = roleArn
            self.storageConfiguration = storageConfiguration
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 256)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.knowledgeBaseConfiguration.validate(name: "\(name).knowledgeBaseConfiguration")
            try self.validate(self.name, name: "name", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?AmazonBedrockExecutionRoleForKnowledgeBase.+$")
            try self.storageConfiguration.validate(name: "\(name).storageConfiguration")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.key, name: "tags.key", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case description = "description"
            case knowledgeBaseConfiguration = "knowledgeBaseConfiguration"
            case name = "name"
            case roleArn = "roleArn"
            case storageConfiguration = "storageConfiguration"
            case tags = "tags"
        }
    }

    public struct CreateKnowledgeBaseResponse: AWSDecodableShape {
        public let knowledgeBase: KnowledgeBase

        public init(knowledgeBase: KnowledgeBase) {
            self.knowledgeBase = knowledgeBase
        }

        private enum CodingKeys: String, CodingKey {
            case knowledgeBase = "knowledgeBase"
        }
    }

    public struct DataSource: AWSDecodableShape {
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let dataSourceConfiguration: DataSourceConfiguration
        public let dataSourceId: String
        public let description: String?
        public let knowledgeBaseId: String
        public let name: String
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
        public let status: DataSourceStatus
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date
        public let vectorIngestionConfiguration: VectorIngestionConfiguration?

        public init(createdAt: Date, dataSourceConfiguration: DataSourceConfiguration, dataSourceId: String, description: String? = nil, knowledgeBaseId: String, name: String, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil, status: DataSourceStatus, updatedAt: Date, vectorIngestionConfiguration: VectorIngestionConfiguration? = nil) {
            self.createdAt = createdAt
            self.dataSourceConfiguration = dataSourceConfiguration
            self.dataSourceId = dataSourceId
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.status = status
            self.updatedAt = updatedAt
            self.vectorIngestionConfiguration = vectorIngestionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case dataSourceConfiguration = "dataSourceConfiguration"
            case dataSourceId = "dataSourceId"
            case description = "description"
            case knowledgeBaseId = "knowledgeBaseId"
            case name = "name"
            case serverSideEncryptionConfiguration = "serverSideEncryptionConfiguration"
            case status = "status"
            case updatedAt = "updatedAt"
            case vectorIngestionConfiguration = "vectorIngestionConfiguration"
        }
    }

    public struct DataSourceConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let s3Configuration: S3DataSourceConfiguration?
        public let type: DataSourceType

        public init(s3Configuration: S3DataSourceConfiguration? = nil, type: DataSourceType) {
            self.s3Configuration = s3Configuration
            self.type = type
        }

        public func validate(name: String) throws {
            try self.s3Configuration?.validate(name: "\(name).s3Configuration")
        }

        private enum CodingKeys: String, CodingKey {
            case s3Configuration = "s3Configuration"
            case type = "type"
        }
    }

    public struct DataSourceSummary: AWSDecodableShape {
        public let dataSourceId: String
        public let description: String?
        public let knowledgeBaseId: String
        public let name: String
        public let status: DataSourceStatus
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(dataSourceId: String, description: String? = nil, knowledgeBaseId: String, name: String, status: DataSourceStatus, updatedAt: Date) {
            self.dataSourceId = dataSourceId
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceId = "dataSourceId"
            case description = "description"
            case knowledgeBaseId = "knowledgeBaseId"
            case name = "name"
            case status = "status"
            case updatedAt = "updatedAt"
        }
    }

    public struct DeleteAgentActionGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "actionGroupId", location: .uri("actionGroupId")),
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion")),
            AWSMemberEncoding(label: "skipResourceInUseCheck", location: .querystring("skipResourceInUseCheck"))
        ]

        /// Id generated at the server side when an Agent ActionGroup is created
        public let actionGroupId: String
        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Draft Version of the Agent.
        public let agentVersion: String
        /// Skips checking if resource is in use when set to true. Defaults to false
        public let skipResourceInUseCheck: Bool?

        public init(actionGroupId: String, agentId: String, agentVersion: String, skipResourceInUseCheck: Bool? = nil) {
            self.actionGroupId = actionGroupId
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.skipResourceInUseCheck = skipResourceInUseCheck
        }

        public func validate(name: String) throws {
            try self.validate(self.actionGroupId, name: "actionGroupId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^DRAFT$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAgentActionGroupResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteAgentAliasRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentAliasId", location: .uri("agentAliasId")),
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent Alias is created
        public let agentAliasId: String
        /// Id generated at the server side when an Agent is created
        public let agentId: String

        public init(agentAliasId: String, agentId: String) {
            self.agentAliasId = agentAliasId
            self.agentId = agentId
        }

        public func validate(name: String) throws {
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, max: 10)
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, min: 10)
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAgentAliasResponse: AWSDecodableShape {
        public let agentAliasId: String
        public let agentAliasStatus: AgentAliasStatus
        public let agentId: String

        public init(agentAliasId: String, agentAliasStatus: AgentAliasStatus, agentId: String) {
            self.agentAliasId = agentAliasId
            self.agentAliasStatus = agentAliasStatus
            self.agentId = agentId
        }

        private enum CodingKeys: String, CodingKey {
            case agentAliasId = "agentAliasId"
            case agentAliasStatus = "agentAliasStatus"
            case agentId = "agentId"
        }
    }

    public struct DeleteAgentRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "skipResourceInUseCheck", location: .querystring("skipResourceInUseCheck"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Skips checking if resource is in use when set to true. Defaults to false
        public let skipResourceInUseCheck: Bool?

        public init(agentId: String, skipResourceInUseCheck: Bool? = nil) {
            self.agentId = agentId
            self.skipResourceInUseCheck = skipResourceInUseCheck
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAgentResponse: AWSDecodableShape {
        public let agentId: String
        public let agentStatus: AgentStatus

        public init(agentId: String, agentStatus: AgentStatus) {
            self.agentId = agentId
            self.agentStatus = agentStatus
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case agentStatus = "agentStatus"
        }
    }

    public struct DeleteAgentVersionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion")),
            AWSMemberEncoding(label: "skipResourceInUseCheck", location: .querystring("skipResourceInUseCheck"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let agentVersion: String
        /// Skips checking if resource is in use when set to true. Defaults to false
        public let skipResourceInUseCheck: Bool?

        public init(agentId: String, agentVersion: String, skipResourceInUseCheck: Bool? = nil) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.skipResourceInUseCheck = skipResourceInUseCheck
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^[0-9]{1,5}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAgentVersionResponse: AWSDecodableShape {
        public let agentId: String
        public let agentStatus: AgentStatus
        public let agentVersion: String

        public init(agentId: String, agentStatus: AgentStatus, agentVersion: String) {
            self.agentId = agentId
            self.agentStatus = agentStatus
            self.agentVersion = agentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case agentStatus = "agentStatus"
            case agentVersion = "agentVersion"
        }
    }

    public struct DeleteDataSourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "dataSourceId", location: .uri("dataSourceId")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let dataSourceId: String
        public let knowledgeBaseId: String

        public init(dataSourceId: String, knowledgeBaseId: String) {
            self.dataSourceId = dataSourceId
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.dataSourceId, name: "dataSourceId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteDataSourceResponse: AWSDecodableShape {
        public let dataSourceId: String
        public let knowledgeBaseId: String
        public let status: DataSourceStatus

        public init(dataSourceId: String, knowledgeBaseId: String, status: DataSourceStatus) {
            self.dataSourceId = dataSourceId
            self.knowledgeBaseId = knowledgeBaseId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceId = "dataSourceId"
            case knowledgeBaseId = "knowledgeBaseId"
            case status = "status"
        }
    }

    public struct DeleteKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let knowledgeBaseId: String

        public init(knowledgeBaseId: String) {
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteKnowledgeBaseResponse: AWSDecodableShape {
        public let knowledgeBaseId: String
        public let status: KnowledgeBaseStatus

        public init(knowledgeBaseId: String, status: KnowledgeBaseStatus) {
            self.knowledgeBaseId = knowledgeBaseId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case knowledgeBaseId = "knowledgeBaseId"
            case status = "status"
        }
    }

    public struct DisassociateAgentKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Draft Version of the Agent.
        public let agentVersion: String
        /// Id generated at the server side when a Knowledge Base is associated to an Agent
        public let knowledgeBaseId: String

        public init(agentId: String, agentVersion: String, knowledgeBaseId: String) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^DRAFT$")
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DisassociateAgentKnowledgeBaseResponse: AWSDecodableShape {
        public init() {}
    }

    public struct FixedSizeChunkingConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of tokens per chunk.
        public let maxTokens: Int
        /// The overlap percentage between adjacent chunks.
        public let overlapPercentage: Int

        public init(maxTokens: Int, overlapPercentage: Int) {
            self.maxTokens = maxTokens
            self.overlapPercentage = overlapPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case maxTokens = "maxTokens"
            case overlapPercentage = "overlapPercentage"
        }
    }

    public struct GetAgentActionGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "actionGroupId", location: .uri("actionGroupId")),
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        /// Id generated at the server side when an Agent Action Group is created
        public let actionGroupId: String
        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Version number generated when a version is created
        public let agentVersion: String

        public init(actionGroupId: String, agentId: String, agentVersion: String) {
            self.actionGroupId = actionGroupId
            self.agentId = agentId
            self.agentVersion = agentVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.actionGroupId, name: "actionGroupId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 1)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetAgentActionGroupResponse: AWSDecodableShape {
        public let agentActionGroup: AgentActionGroup

        public init(agentActionGroup: AgentActionGroup) {
            self.agentActionGroup = agentActionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case agentActionGroup = "agentActionGroup"
        }
    }

    public struct GetAgentAliasRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentAliasId", location: .uri("agentAliasId")),
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent Alias is created
        public let agentAliasId: String
        /// Id generated at the server side when an Agent is created
        public let agentId: String

        public init(agentAliasId: String, agentId: String) {
            self.agentAliasId = agentAliasId
            self.agentId = agentId
        }

        public func validate(name: String) throws {
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, max: 10)
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, min: 10)
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetAgentAliasResponse: AWSDecodableShape {
        public let agentAlias: AgentAlias

        public init(agentAlias: AgentAlias) {
            self.agentAlias = agentAlias
        }

        private enum CodingKeys: String, CodingKey {
            case agentAlias = "agentAlias"
        }
    }

    public struct GetAgentKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Version number generated when a version is created
        public let agentVersion: String
        /// Id generated at the server side when a Knowledge Base is associated
        public let knowledgeBaseId: String

        public init(agentId: String, agentVersion: String, knowledgeBaseId: String) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 1)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$")
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetAgentKnowledgeBaseResponse: AWSDecodableShape {
        public let agentKnowledgeBase: AgentKnowledgeBase

        public init(agentKnowledgeBase: AgentKnowledgeBase) {
            self.agentKnowledgeBase = agentKnowledgeBase
        }

        private enum CodingKeys: String, CodingKey {
            case agentKnowledgeBase = "agentKnowledgeBase"
        }
    }

    public struct GetAgentRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String

        public init(agentId: String) {
            self.agentId = agentId
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetAgentResponse: AWSDecodableShape {
        public let agent: Agent

        public init(agent: Agent) {
            self.agent = agent
        }

        private enum CodingKeys: String, CodingKey {
            case agent = "agent"
        }
    }

    public struct GetAgentVersionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let agentVersion: String

        public init(agentId: String, agentVersion: String) {
            self.agentId = agentId
            self.agentVersion = agentVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^[0-9]{1,5}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetAgentVersionResponse: AWSDecodableShape {
        public let agentVersion: AgentVersion

        public init(agentVersion: AgentVersion) {
            self.agentVersion = agentVersion
        }

        private enum CodingKeys: String, CodingKey {
            case agentVersion = "agentVersion"
        }
    }

    public struct GetDataSourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "dataSourceId", location: .uri("dataSourceId")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let dataSourceId: String
        public let knowledgeBaseId: String

        public init(dataSourceId: String, knowledgeBaseId: String) {
            self.dataSourceId = dataSourceId
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.dataSourceId, name: "dataSourceId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDataSourceResponse: AWSDecodableShape {
        public let dataSource: DataSource

        public init(dataSource: DataSource) {
            self.dataSource = dataSource
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
        }
    }

    public struct GetIngestionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "dataSourceId", location: .uri("dataSourceId")),
            AWSMemberEncoding(label: "ingestionJobId", location: .uri("ingestionJobId")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let dataSourceId: String
        public let ingestionJobId: String
        public let knowledgeBaseId: String

        public init(dataSourceId: String, ingestionJobId: String, knowledgeBaseId: String) {
            self.dataSourceId = dataSourceId
            self.ingestionJobId = ingestionJobId
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.dataSourceId, name: "dataSourceId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.ingestionJobId, name: "ingestionJobId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetIngestionJobResponse: AWSDecodableShape {
        public let ingestionJob: IngestionJob

        public init(ingestionJob: IngestionJob) {
            self.ingestionJob = ingestionJob
        }

        private enum CodingKeys: String, CodingKey {
            case ingestionJob = "ingestionJob"
        }
    }

    public struct GetKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let knowledgeBaseId: String

        public init(knowledgeBaseId: String) {
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetKnowledgeBaseResponse: AWSDecodableShape {
        public let knowledgeBase: KnowledgeBase

        public init(knowledgeBase: KnowledgeBase) {
            self.knowledgeBase = knowledgeBase
        }

        private enum CodingKeys: String, CodingKey {
            case knowledgeBase = "knowledgeBase"
        }
    }

    public struct InferenceConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let maximumLength: Int?
        public let stopSequences: [String]?
        public let temperature: Float?
        public let topK: Int?
        public let topP: Float?

        public init(maximumLength: Int? = nil, stopSequences: [String]? = nil, temperature: Float? = nil, topK: Int? = nil, topP: Float? = nil) {
            self.maximumLength = maximumLength
            self.stopSequences = stopSequences
            self.temperature = temperature
            self.topK = topK
            self.topP = topP
        }

        public func validate(name: String) throws {
            try self.validate(self.maximumLength, name: "maximumLength", parent: name, max: 4096)
            try self.validate(self.maximumLength, name: "maximumLength", parent: name, min: 0)
            try self.validate(self.stopSequences, name: "stopSequences", parent: name, max: 4)
            try self.validate(self.temperature, name: "temperature", parent: name, max: 1.0)
            try self.validate(self.temperature, name: "temperature", parent: name, min: 0.0)
            try self.validate(self.topK, name: "topK", parent: name, max: 500)
            try self.validate(self.topK, name: "topK", parent: name, min: 0)
            try self.validate(self.topP, name: "topP", parent: name, max: 1.0)
            try self.validate(self.topP, name: "topP", parent: name, min: 0.0)
        }

        private enum CodingKeys: String, CodingKey {
            case maximumLength = "maximumLength"
            case stopSequences = "stopSequences"
            case temperature = "temperature"
            case topK = "topK"
            case topP = "topP"
        }
    }

    public struct IngestionJob: AWSDecodableShape {
        public let dataSourceId: String
        public let description: String?
        public let failureReasons: [String]?
        public let ingestionJobId: String
        public let knowledgeBaseId: String
        @CustomCoding<ISO8601DateCoder>
        public var startedAt: Date
        public let statistics: IngestionJobStatistics?
        public let status: IngestionJobStatus
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(dataSourceId: String, description: String? = nil, failureReasons: [String]? = nil, ingestionJobId: String, knowledgeBaseId: String, startedAt: Date, statistics: IngestionJobStatistics? = nil, status: IngestionJobStatus, updatedAt: Date) {
            self.dataSourceId = dataSourceId
            self.description = description
            self.failureReasons = failureReasons
            self.ingestionJobId = ingestionJobId
            self.knowledgeBaseId = knowledgeBaseId
            self.startedAt = startedAt
            self.statistics = statistics
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceId = "dataSourceId"
            case description = "description"
            case failureReasons = "failureReasons"
            case ingestionJobId = "ingestionJobId"
            case knowledgeBaseId = "knowledgeBaseId"
            case startedAt = "startedAt"
            case statistics = "statistics"
            case status = "status"
            case updatedAt = "updatedAt"
        }
    }

    public struct IngestionJobFilter: AWSEncodableShape {
        public let attribute: IngestionJobFilterAttribute
        public let `operator`: IngestionJobFilterOperator
        public let values: [String]

        public init(attribute: IngestionJobFilterAttribute, operator: IngestionJobFilterOperator, values: [String]) {
            self.attribute = attribute
            self.`operator` = `operator`
            self.values = values
        }

        public func validate(name: String) throws {
            try self.values.forEach {
                try validate($0, name: "values[]", parent: name, max: 100)
                try validate($0, name: "values[]", parent: name, pattern: "^.*$")
            }
            try self.validate(self.values, name: "values", parent: name, max: 10)
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case `operator` = "operator"
            case values = "values"
        }
    }

    public struct IngestionJobSortBy: AWSEncodableShape {
        public let attribute: IngestionJobSortByAttribute
        public let order: SortOrder

        public init(attribute: IngestionJobSortByAttribute, order: SortOrder) {
            self.attribute = attribute
            self.order = order
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case order = "order"
        }
    }

    public struct IngestionJobStatistics: AWSDecodableShape {
        /// Number of deleted documents
        public let numberOfDocumentsDeleted: Int64?
        /// Number of failed documents
        public let numberOfDocumentsFailed: Int64?
        /// Number of scanned documents
        public let numberOfDocumentsScanned: Int64?
        /// Number of modified documents indexed
        public let numberOfModifiedDocumentsIndexed: Int64?
        /// Number of indexed documents
        public let numberOfNewDocumentsIndexed: Int64?

        public init(numberOfDocumentsDeleted: Int64? = nil, numberOfDocumentsFailed: Int64? = nil, numberOfDocumentsScanned: Int64? = nil, numberOfModifiedDocumentsIndexed: Int64? = nil, numberOfNewDocumentsIndexed: Int64? = nil) {
            self.numberOfDocumentsDeleted = numberOfDocumentsDeleted
            self.numberOfDocumentsFailed = numberOfDocumentsFailed
            self.numberOfDocumentsScanned = numberOfDocumentsScanned
            self.numberOfModifiedDocumentsIndexed = numberOfModifiedDocumentsIndexed
            self.numberOfNewDocumentsIndexed = numberOfNewDocumentsIndexed
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfDocumentsDeleted = "numberOfDocumentsDeleted"
            case numberOfDocumentsFailed = "numberOfDocumentsFailed"
            case numberOfDocumentsScanned = "numberOfDocumentsScanned"
            case numberOfModifiedDocumentsIndexed = "numberOfModifiedDocumentsIndexed"
            case numberOfNewDocumentsIndexed = "numberOfNewDocumentsIndexed"
        }
    }

    public struct IngestionJobSummary: AWSDecodableShape {
        public let dataSourceId: String
        public let description: String?
        public let ingestionJobId: String
        public let knowledgeBaseId: String
        @CustomCoding<ISO8601DateCoder>
        public var startedAt: Date
        public let statistics: IngestionJobStatistics?
        public let status: IngestionJobStatus
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(dataSourceId: String, description: String? = nil, ingestionJobId: String, knowledgeBaseId: String, startedAt: Date, statistics: IngestionJobStatistics? = nil, status: IngestionJobStatus, updatedAt: Date) {
            self.dataSourceId = dataSourceId
            self.description = description
            self.ingestionJobId = ingestionJobId
            self.knowledgeBaseId = knowledgeBaseId
            self.startedAt = startedAt
            self.statistics = statistics
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceId = "dataSourceId"
            case description = "description"
            case ingestionJobId = "ingestionJobId"
            case knowledgeBaseId = "knowledgeBaseId"
            case startedAt = "startedAt"
            case statistics = "statistics"
            case status = "status"
            case updatedAt = "updatedAt"
        }
    }

    public struct KnowledgeBase: AWSDecodableShape {
        @CustomCoding<ISO8601DateCoder>
        public var createdAt: Date
        public let description: String?
        public let failureReasons: [String]?
        public let knowledgeBaseArn: String
        public let knowledgeBaseConfiguration: KnowledgeBaseConfiguration
        public let knowledgeBaseId: String
        public let name: String
        public let roleArn: String
        public let status: KnowledgeBaseStatus
        public let storageConfiguration: StorageConfiguration
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(createdAt: Date, description: String? = nil, failureReasons: [String]? = nil, knowledgeBaseArn: String, knowledgeBaseConfiguration: KnowledgeBaseConfiguration, knowledgeBaseId: String, name: String, roleArn: String, status: KnowledgeBaseStatus, storageConfiguration: StorageConfiguration, updatedAt: Date) {
            self.createdAt = createdAt
            self.description = description
            self.failureReasons = failureReasons
            self.knowledgeBaseArn = knowledgeBaseArn
            self.knowledgeBaseConfiguration = knowledgeBaseConfiguration
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.roleArn = roleArn
            self.status = status
            self.storageConfiguration = storageConfiguration
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case description = "description"
            case failureReasons = "failureReasons"
            case knowledgeBaseArn = "knowledgeBaseArn"
            case knowledgeBaseConfiguration = "knowledgeBaseConfiguration"
            case knowledgeBaseId = "knowledgeBaseId"
            case name = "name"
            case roleArn = "roleArn"
            case status = "status"
            case storageConfiguration = "storageConfiguration"
            case updatedAt = "updatedAt"
        }
    }

    public struct KnowledgeBaseConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let type: KnowledgeBaseType
        public let vectorKnowledgeBaseConfiguration: VectorKnowledgeBaseConfiguration?

        public init(type: KnowledgeBaseType, vectorKnowledgeBaseConfiguration: VectorKnowledgeBaseConfiguration? = nil) {
            self.type = type
            self.vectorKnowledgeBaseConfiguration = vectorKnowledgeBaseConfiguration
        }

        public func validate(name: String) throws {
            try self.vectorKnowledgeBaseConfiguration?.validate(name: "\(name).vectorKnowledgeBaseConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
            case vectorKnowledgeBaseConfiguration = "vectorKnowledgeBaseConfiguration"
        }
    }

    public struct KnowledgeBaseSummary: AWSDecodableShape {
        public let description: String?
        public let knowledgeBaseId: String
        public let name: String
        public let status: KnowledgeBaseStatus
        @CustomCoding<ISO8601DateCoder>
        public var updatedAt: Date

        public init(description: String? = nil, knowledgeBaseId: String, name: String, status: KnowledgeBaseStatus, updatedAt: Date) {
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case knowledgeBaseId = "knowledgeBaseId"
            case name = "name"
            case status = "status"
            case updatedAt = "updatedAt"
        }
    }

    public struct ListAgentActionGroupsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        /// Id generated at the server side when an Agent is Listed
        public let agentId: String
        /// Id generated at the server side when an Agent is Listed
        public let agentVersion: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(agentId: String, agentVersion: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 1)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentActionGroupsResponse: AWSDecodableShape {
        public let actionGroupSummaries: [ActionGroupSummary]
        public let nextToken: String?

        public init(actionGroupSummaries: [ActionGroupSummary], nextToken: String? = nil) {
            self.actionGroupSummaries = actionGroupSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case actionGroupSummaries = "actionGroupSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentAliasesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(agentId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.agentId = agentId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentAliasesResponse: AWSDecodableShape {
        public let agentAliasSummaries: [AgentAliasSummary]
        public let nextToken: String?

        public init(agentAliasSummaries: [AgentAliasSummary], nextToken: String? = nil) {
            self.agentAliasSummaries = agentAliasSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentAliasSummaries = "agentAliasSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentKnowledgeBasesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Version number generated when a version is created
        public let agentVersion: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(agentId: String, agentVersion: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 1)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentKnowledgeBasesResponse: AWSDecodableShape {
        public let agentKnowledgeBaseSummaries: [AgentKnowledgeBaseSummary]
        public let nextToken: String?

        public init(agentKnowledgeBaseSummaries: [AgentKnowledgeBaseSummary], nextToken: String? = nil) {
            self.agentKnowledgeBaseSummaries = agentKnowledgeBaseSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentKnowledgeBaseSummaries = "agentKnowledgeBaseSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentVersionsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(agentId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.agentId = agentId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentVersionsResponse: AWSDecodableShape {
        public let agentVersionSummaries: [AgentVersionSummary]
        public let nextToken: String?

        public init(agentVersionSummaries: [AgentVersionSummary], nextToken: String? = nil) {
            self.agentVersionSummaries = agentVersionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentVersionSummaries = "agentVersionSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentsRequest: AWSEncodableShape {
        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListAgentsResponse: AWSDecodableShape {
        public let agentSummaries: [AgentSummary]
        public let nextToken: String?

        public init(agentSummaries: [AgentSummary], nextToken: String? = nil) {
            self.agentSummaries = agentSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentSummaries = "agentSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListDataSourcesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let knowledgeBaseId: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(knowledgeBaseId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.knowledgeBaseId = knowledgeBaseId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListDataSourcesResponse: AWSDecodableShape {
        public let dataSourceSummaries: [DataSourceSummary]
        public let nextToken: String?

        public init(dataSourceSummaries: [DataSourceSummary], nextToken: String? = nil) {
            self.dataSourceSummaries = dataSourceSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceSummaries = "dataSourceSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListIngestionJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "dataSourceId", location: .uri("dataSourceId")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let dataSourceId: String
        public let filters: [IngestionJobFilter]?
        public let knowledgeBaseId: String
        public let maxResults: Int?
        public let nextToken: String?
        public let sortBy: IngestionJobSortBy?

        public init(dataSourceId: String, filters: [IngestionJobFilter]? = nil, knowledgeBaseId: String, maxResults: Int? = nil, nextToken: String? = nil, sortBy: IngestionJobSortBy? = nil) {
            self.dataSourceId = dataSourceId
            self.filters = filters
            self.knowledgeBaseId = knowledgeBaseId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
        }

        public func validate(name: String) throws {
            try self.validate(self.dataSourceId, name: "dataSourceId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.filters, name: "filters", parent: name, max: 1)
            try self.validate(self.filters, name: "filters", parent: name, min: 1)
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortBy = "sortBy"
        }
    }

    public struct ListIngestionJobsResponse: AWSDecodableShape {
        public let ingestionJobSummaries: [IngestionJobSummary]
        public let nextToken: String?

        public init(ingestionJobSummaries: [IngestionJobSummary], nextToken: String? = nil) {
            self.ingestionJobSummaries = ingestionJobSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ingestionJobSummaries = "ingestionJobSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListKnowledgeBasesRequest: AWSEncodableShape {
        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2048)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^\\S*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListKnowledgeBasesResponse: AWSDecodableShape {
        public let knowledgeBaseSummaries: [KnowledgeBaseSummary]
        public let nextToken: String?

        public init(knowledgeBaseSummaries: [KnowledgeBaseSummary], nextToken: String? = nil) {
            self.knowledgeBaseSummaries = knowledgeBaseSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case knowledgeBaseSummaries = "knowledgeBaseSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("resourceArn"))
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "(^arn:aws:bedrock:[a-zA-Z0-9-]+:/d{12}:(agent|agent-alias|knowledge-base)/[A-Z0-9]{10}(?:/[A-Z0-9]{10})?$)")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct OpenSearchServerlessConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let collectionArn: String
        public let fieldMapping: OpenSearchServerlessFieldMapping
        public let vectorIndexName: String

        public init(collectionArn: String, fieldMapping: OpenSearchServerlessFieldMapping, vectorIndexName: String) {
            self.collectionArn = collectionArn
            self.fieldMapping = fieldMapping
            self.vectorIndexName = vectorIndexName
        }

        public func validate(name: String) throws {
            try self.validate(self.collectionArn, name: "collectionArn", parent: name, max: 2048)
            try self.validate(self.collectionArn, name: "collectionArn", parent: name, pattern: "^arn:aws:aoss:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:collection/[a-z0-9-]{3,32}$")
            try self.fieldMapping.validate(name: "\(name).fieldMapping")
            try self.validate(self.vectorIndexName, name: "vectorIndexName", parent: name, max: 2048)
            try self.validate(self.vectorIndexName, name: "vectorIndexName", parent: name, pattern: "^.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case collectionArn = "collectionArn"
            case fieldMapping = "fieldMapping"
            case vectorIndexName = "vectorIndexName"
        }
    }

    public struct OpenSearchServerlessFieldMapping: AWSEncodableShape & AWSDecodableShape {
        public let metadataField: String
        public let textField: String
        public let vectorField: String

        public init(metadataField: String, textField: String, vectorField: String) {
            self.metadataField = metadataField
            self.textField = textField
            self.vectorField = vectorField
        }

        public func validate(name: String) throws {
            try self.validate(self.metadataField, name: "metadataField", parent: name, max: 2048)
            try self.validate(self.metadataField, name: "metadataField", parent: name, pattern: "^.*$")
            try self.validate(self.textField, name: "textField", parent: name, max: 2048)
            try self.validate(self.textField, name: "textField", parent: name, pattern: "^.*$")
            try self.validate(self.vectorField, name: "vectorField", parent: name, max: 2048)
            try self.validate(self.vectorField, name: "vectorField", parent: name, pattern: "^.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case metadataField = "metadataField"
            case textField = "textField"
            case vectorField = "vectorField"
        }
    }

    public struct PineconeConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let connectionString: String
        public let credentialsSecretArn: String
        public let fieldMapping: PineconeFieldMapping
        public let namespace: String?

        public init(connectionString: String, credentialsSecretArn: String, fieldMapping: PineconeFieldMapping, namespace: String? = nil) {
            self.connectionString = connectionString
            self.credentialsSecretArn = credentialsSecretArn
            self.fieldMapping = fieldMapping
            self.namespace = namespace
        }

        public func validate(name: String) throws {
            try self.validate(self.connectionString, name: "connectionString", parent: name, max: 2048)
            try self.validate(self.connectionString, name: "connectionString", parent: name, pattern: "^.*$")
            try self.validate(self.credentialsSecretArn, name: "credentialsSecretArn", parent: name, pattern: "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9/_+=.@-]{1,63}$")
            try self.fieldMapping.validate(name: "\(name).fieldMapping")
            try self.validate(self.namespace, name: "namespace", parent: name, max: 2048)
            try self.validate(self.namespace, name: "namespace", parent: name, pattern: "^.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionString = "connectionString"
            case credentialsSecretArn = "credentialsSecretArn"
            case fieldMapping = "fieldMapping"
            case namespace = "namespace"
        }
    }

    public struct PineconeFieldMapping: AWSEncodableShape & AWSDecodableShape {
        public let metadataField: String
        public let textField: String

        public init(metadataField: String, textField: String) {
            self.metadataField = metadataField
            self.textField = textField
        }

        public func validate(name: String) throws {
            try self.validate(self.metadataField, name: "metadataField", parent: name, max: 2048)
            try self.validate(self.metadataField, name: "metadataField", parent: name, pattern: "^.*$")
            try self.validate(self.textField, name: "textField", parent: name, max: 2048)
            try self.validate(self.textField, name: "textField", parent: name, pattern: "^.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case metadataField = "metadataField"
            case textField = "textField"
        }
    }

    public struct PrepareAgentRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String

        public init(agentId: String) {
            self.agentId = agentId
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct PrepareAgentResponse: AWSDecodableShape {
        public let agentId: String
        public let agentStatus: AgentStatus
        public let agentVersion: String
        @CustomCoding<ISO8601DateCoder>
        public var preparedAt: Date

        public init(agentId: String, agentStatus: AgentStatus, agentVersion: String, preparedAt: Date) {
            self.agentId = agentId
            self.agentStatus = agentStatus
            self.agentVersion = agentVersion
            self.preparedAt = preparedAt
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case agentStatus = "agentStatus"
            case agentVersion = "agentVersion"
            case preparedAt = "preparedAt"
        }
    }

    public struct PromptConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let basePromptTemplate: String?
        public let inferenceConfiguration: InferenceConfiguration?
        public let parserMode: CreationMode?
        public let promptCreationMode: CreationMode?
        public let promptState: PromptState?
        public let promptType: PromptType?

        public init(basePromptTemplate: String? = nil, inferenceConfiguration: InferenceConfiguration? = nil, parserMode: CreationMode? = nil, promptCreationMode: CreationMode? = nil, promptState: PromptState? = nil, promptType: PromptType? = nil) {
            self.basePromptTemplate = basePromptTemplate
            self.inferenceConfiguration = inferenceConfiguration
            self.parserMode = parserMode
            self.promptCreationMode = promptCreationMode
            self.promptState = promptState
            self.promptType = promptType
        }

        public func validate(name: String) throws {
            try self.validate(self.basePromptTemplate, name: "basePromptTemplate", parent: name, max: 100000)
            try self.validate(self.basePromptTemplate, name: "basePromptTemplate", parent: name, min: 1)
            try self.inferenceConfiguration?.validate(name: "\(name).inferenceConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case basePromptTemplate = "basePromptTemplate"
            case inferenceConfiguration = "inferenceConfiguration"
            case parserMode = "parserMode"
            case promptCreationMode = "promptCreationMode"
            case promptState = "promptState"
            case promptType = "promptType"
        }
    }

    public struct PromptOverrideConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let overrideLambda: String?
        public let promptConfigurations: [PromptConfiguration]

        public init(overrideLambda: String? = nil, promptConfigurations: [PromptConfiguration]) {
            self.overrideLambda = overrideLambda
            self.promptConfigurations = promptConfigurations
        }

        public func validate(name: String) throws {
            try self.validate(self.overrideLambda, name: "overrideLambda", parent: name, max: 2048)
            try self.validate(self.overrideLambda, name: "overrideLambda", parent: name, pattern: "^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$")
            try self.promptConfigurations.forEach {
                try $0.validate(name: "\(name).promptConfigurations[]")
            }
            try self.validate(self.promptConfigurations, name: "promptConfigurations", parent: name, max: 10)
        }

        private enum CodingKeys: String, CodingKey {
            case overrideLambda = "overrideLambda"
            case promptConfigurations = "promptConfigurations"
        }
    }

    public struct RedisEnterpriseCloudConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let credentialsSecretArn: String
        public let endpoint: String
        public let fieldMapping: RedisEnterpriseCloudFieldMapping
        public let vectorIndexName: String

        public init(credentialsSecretArn: String, endpoint: String, fieldMapping: RedisEnterpriseCloudFieldMapping, vectorIndexName: String) {
            self.credentialsSecretArn = credentialsSecretArn
            self.endpoint = endpoint
            self.fieldMapping = fieldMapping
            self.vectorIndexName = vectorIndexName
        }

        public func validate(name: String) throws {
            try self.validate(self.credentialsSecretArn, name: "credentialsSecretArn", parent: name, pattern: "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9/_+=.@-]{1,63}$")
            try self.validate(self.endpoint, name: "endpoint", parent: name, max: 2048)
            try self.validate(self.endpoint, name: "endpoint", parent: name, pattern: "^.*$")
            try self.fieldMapping.validate(name: "\(name).fieldMapping")
            try self.validate(self.vectorIndexName, name: "vectorIndexName", parent: name, max: 2048)
            try self.validate(self.vectorIndexName, name: "vectorIndexName", parent: name, pattern: "^.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case credentialsSecretArn = "credentialsSecretArn"
            case endpoint = "endpoint"
            case fieldMapping = "fieldMapping"
            case vectorIndexName = "vectorIndexName"
        }
    }

    public struct RedisEnterpriseCloudFieldMapping: AWSEncodableShape & AWSDecodableShape {
        public let metadataField: String
        public let textField: String
        public let vectorField: String

        public init(metadataField: String, textField: String, vectorField: String) {
            self.metadataField = metadataField
            self.textField = textField
            self.vectorField = vectorField
        }

        public func validate(name: String) throws {
            try self.validate(self.metadataField, name: "metadataField", parent: name, max: 2048)
            try self.validate(self.metadataField, name: "metadataField", parent: name, pattern: "^.*$")
            try self.validate(self.textField, name: "textField", parent: name, max: 2048)
            try self.validate(self.textField, name: "textField", parent: name, pattern: "^.*$")
            try self.validate(self.vectorField, name: "vectorField", parent: name, max: 2048)
            try self.validate(self.vectorField, name: "vectorField", parent: name, pattern: "^.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case metadataField = "metadataField"
            case textField = "textField"
            case vectorField = "vectorField"
        }
    }

    public struct S3DataSourceConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let bucketArn: String
        public let inclusionPrefixes: [String]?

        public init(bucketArn: String, inclusionPrefixes: [String]? = nil) {
            self.bucketArn = bucketArn
            self.inclusionPrefixes = inclusionPrefixes
        }

        public func validate(name: String) throws {
            try self.validate(self.bucketArn, name: "bucketArn", parent: name, max: 2048)
            try self.validate(self.bucketArn, name: "bucketArn", parent: name, min: 1)
            try self.validate(self.bucketArn, name: "bucketArn", parent: name, pattern: "^arn:aws(|-cn|-us-gov):s3:::[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$")
            try self.inclusionPrefixes?.forEach {
                try validate($0, name: "inclusionPrefixes[]", parent: name, max: 300)
                try validate($0, name: "inclusionPrefixes[]", parent: name, min: 1)
            }
            try self.validate(self.inclusionPrefixes, name: "inclusionPrefixes", parent: name, max: 1)
            try self.validate(self.inclusionPrefixes, name: "inclusionPrefixes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucketArn = "bucketArn"
            case inclusionPrefixes = "inclusionPrefixes"
        }
    }

    public struct S3Identifier: AWSEncodableShape & AWSDecodableShape {
        public let s3BucketName: String?
        public let s3ObjectKey: String?

        public init(s3BucketName: String? = nil, s3ObjectKey: String? = nil) {
            self.s3BucketName = s3BucketName
            self.s3ObjectKey = s3ObjectKey
        }

        public func validate(name: String) throws {
            try self.validate(self.s3BucketName, name: "s3BucketName", parent: name, max: 63)
            try self.validate(self.s3BucketName, name: "s3BucketName", parent: name, min: 3)
            try self.validate(self.s3BucketName, name: "s3BucketName", parent: name, pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$")
            try self.validate(self.s3ObjectKey, name: "s3ObjectKey", parent: name, max: 1024)
            try self.validate(self.s3ObjectKey, name: "s3ObjectKey", parent: name, min: 1)
            try self.validate(self.s3ObjectKey, name: "s3ObjectKey", parent: name, pattern: "^[\\.\\-\\!\\*\\_\\'\\(\\)a-zA-Z0-9][\\.\\-\\!\\*\\_\\'\\(\\)\\/a-zA-Z0-9]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketName = "s3BucketName"
            case s3ObjectKey = "s3ObjectKey"
        }
    }

    public struct ServerSideEncryptionConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let kmsKeyArn: String?

        public init(kmsKeyArn: String? = nil) {
            self.kmsKeyArn = kmsKeyArn
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyArn, name: "kmsKeyArn", parent: name, max: 2048)
            try self.validate(self.kmsKeyArn, name: "kmsKeyArn", parent: name, min: 1)
            try self.validate(self.kmsKeyArn, name: "kmsKeyArn", parent: name, pattern: "^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyArn = "kmsKeyArn"
        }
    }

    public struct StartIngestionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "dataSourceId", location: .uri("dataSourceId")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let clientToken: String?
        public let dataSourceId: String
        public let description: String?
        public let knowledgeBaseId: String

        public init(clientToken: String? = StartIngestionJobRequest.idempotencyToken(), dataSourceId: String, description: String? = nil, knowledgeBaseId: String) {
            self.clientToken = clientToken
            self.dataSourceId = dataSourceId
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 256)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.validate(self.dataSourceId, name: "dataSourceId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case description = "description"
        }
    }

    public struct StartIngestionJobResponse: AWSDecodableShape {
        public let ingestionJob: IngestionJob

        public init(ingestionJob: IngestionJob) {
            self.ingestionJob = ingestionJob
        }

        private enum CodingKeys: String, CodingKey {
            case ingestionJob = "ingestionJob"
        }
    }

    public struct StorageConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let opensearchServerlessConfiguration: OpenSearchServerlessConfiguration?
        public let pineconeConfiguration: PineconeConfiguration?
        public let redisEnterpriseCloudConfiguration: RedisEnterpriseCloudConfiguration?
        public let type: KnowledgeBaseStorageType

        public init(opensearchServerlessConfiguration: OpenSearchServerlessConfiguration? = nil, pineconeConfiguration: PineconeConfiguration? = nil, redisEnterpriseCloudConfiguration: RedisEnterpriseCloudConfiguration? = nil, type: KnowledgeBaseStorageType) {
            self.opensearchServerlessConfiguration = opensearchServerlessConfiguration
            self.pineconeConfiguration = pineconeConfiguration
            self.redisEnterpriseCloudConfiguration = redisEnterpriseCloudConfiguration
            self.type = type
        }

        public func validate(name: String) throws {
            try self.opensearchServerlessConfiguration?.validate(name: "\(name).opensearchServerlessConfiguration")
            try self.pineconeConfiguration?.validate(name: "\(name).pineconeConfiguration")
            try self.redisEnterpriseCloudConfiguration?.validate(name: "\(name).redisEnterpriseCloudConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case opensearchServerlessConfiguration = "opensearchServerlessConfiguration"
            case pineconeConfiguration = "pineconeConfiguration"
            case redisEnterpriseCloudConfiguration = "redisEnterpriseCloudConfiguration"
            case type = "type"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("resourceArn"))
        ]

        public let resourceArn: String
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "(^arn:aws:bedrock:[a-zA-Z0-9-]+:/d{12}:(agent|agent-alias|knowledge-base)/[A-Z0-9]{10}(?:/[A-Z0-9]{10})?$)")
            try self.tags.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.key, name: "tags.key", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("resourceArn")),
            AWSMemberEncoding(label: "tagKeys", location: .querystring("tagKeys"))
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 20)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "(^arn:aws:bedrock:[a-zA-Z0-9-]+:/d{12}:(agent|agent-alias|knowledge-base)/[A-Z0-9]{10}(?:/[A-Z0-9]{10})?$)")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^[a-zA-Z0-9\\s._:/=+@-]*$")
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 200)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateAgentActionGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "actionGroupId", location: .uri("actionGroupId")),
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion"))
        ]

        public let actionGroupExecutor: ActionGroupExecutor?
        /// Id generated at the server side when an Action Group is created under Agent
        public let actionGroupId: String
        public let actionGroupName: String
        public let actionGroupState: ActionGroupState?
        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Draft Version of the Agent.
        public let agentVersion: String
        public let apiSchema: APISchema?
        public let description: String?
        public let parentActionGroupSignature: ActionGroupSignature?

        public init(actionGroupExecutor: ActionGroupExecutor? = nil, actionGroupId: String, actionGroupName: String, actionGroupState: ActionGroupState? = nil, agentId: String, agentVersion: String, apiSchema: APISchema? = nil, description: String? = nil, parentActionGroupSignature: ActionGroupSignature? = nil) {
            self.actionGroupExecutor = actionGroupExecutor
            self.actionGroupId = actionGroupId
            self.actionGroupName = actionGroupName
            self.actionGroupState = actionGroupState
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.apiSchema = apiSchema
            self.description = description
            self.parentActionGroupSignature = parentActionGroupSignature
        }

        public func validate(name: String) throws {
            try self.actionGroupExecutor?.validate(name: "\(name).actionGroupExecutor")
            try self.validate(self.actionGroupId, name: "actionGroupId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.actionGroupName, name: "actionGroupName", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^DRAFT$")
            try self.apiSchema?.validate(name: "\(name).apiSchema")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case actionGroupExecutor = "actionGroupExecutor"
            case actionGroupName = "actionGroupName"
            case actionGroupState = "actionGroupState"
            case apiSchema = "apiSchema"
            case description = "description"
            case parentActionGroupSignature = "parentActionGroupSignature"
        }
    }

    public struct UpdateAgentActionGroupResponse: AWSDecodableShape {
        public let agentActionGroup: AgentActionGroup

        public init(agentActionGroup: AgentActionGroup) {
            self.agentActionGroup = agentActionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case agentActionGroup = "agentActionGroup"
        }
    }

    public struct UpdateAgentAliasRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentAliasId", location: .uri("agentAliasId")),
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent Alias is created
        public let agentAliasId: String
        public let agentAliasName: String
        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let description: String?
        public let routingConfiguration: [AgentAliasRoutingConfigurationListItem]?

        public init(agentAliasId: String, agentAliasName: String, agentId: String, description: String? = nil, routingConfiguration: [AgentAliasRoutingConfigurationListItem]? = nil) {
            self.agentAliasId = agentAliasId
            self.agentAliasName = agentAliasName
            self.agentId = agentId
            self.description = description
            self.routingConfiguration = routingConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, max: 10)
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, min: 10)
            try self.validate(self.agentAliasId, name: "agentAliasId", parent: name, pattern: "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$")
            try self.validate(self.agentAliasName, name: "agentAliasName", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.routingConfiguration?.forEach {
                try $0.validate(name: "\(name).routingConfiguration[]")
            }
            try self.validate(self.routingConfiguration, name: "routingConfiguration", parent: name, max: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case agentAliasName = "agentAliasName"
            case description = "description"
            case routingConfiguration = "routingConfiguration"
        }
    }

    public struct UpdateAgentAliasResponse: AWSDecodableShape {
        public let agentAlias: AgentAlias

        public init(agentAlias: AgentAlias) {
            self.agentAlias = agentAlias
        }

        private enum CodingKeys: String, CodingKey {
            case agentAlias = "agentAlias"
        }
    }

    public struct UpdateAgentKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId")),
            AWSMemberEncoding(label: "agentVersion", location: .uri("agentVersion")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        /// Draft Version of the Agent.
        public let agentVersion: String
        public let description: String?
        /// Id generated at the server side when a Knowledge Base is associated to an Agent
        public let knowledgeBaseId: String
        public let knowledgeBaseState: KnowledgeBaseState?

        public init(agentId: String, agentVersion: String, description: String? = nil, knowledgeBaseId: String, knowledgeBaseState: KnowledgeBaseState? = nil) {
            self.agentId = agentId
            self.agentVersion = agentVersion
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.knowledgeBaseState = knowledgeBaseState
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, max: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, min: 5)
            try self.validate(self.agentVersion, name: "agentVersion", parent: name, pattern: "^DRAFT$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case knowledgeBaseState = "knowledgeBaseState"
        }
    }

    public struct UpdateAgentKnowledgeBaseResponse: AWSDecodableShape {
        public let agentKnowledgeBase: AgentKnowledgeBase

        public init(agentKnowledgeBase: AgentKnowledgeBase) {
            self.agentKnowledgeBase = agentKnowledgeBase
        }

        private enum CodingKeys: String, CodingKey {
            case agentKnowledgeBase = "agentKnowledgeBase"
        }
    }

    public struct UpdateAgentRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "agentId", location: .uri("agentId"))
        ]

        /// Id generated at the server side when an Agent is created
        public let agentId: String
        public let agentName: String
        public let agentResourceRoleArn: String
        public let customerEncryptionKeyArn: String?
        public let description: String?
        public let foundationModel: String?
        public let idleSessionTTLInSeconds: Int?
        public let instruction: String?
        public let promptOverrideConfiguration: PromptOverrideConfiguration?

        public init(agentId: String, agentName: String, agentResourceRoleArn: String, customerEncryptionKeyArn: String? = nil, description: String? = nil, foundationModel: String? = nil, idleSessionTTLInSeconds: Int? = nil, instruction: String? = nil, promptOverrideConfiguration: PromptOverrideConfiguration? = nil) {
            self.agentId = agentId
            self.agentName = agentName
            self.agentResourceRoleArn = agentResourceRoleArn
            self.customerEncryptionKeyArn = customerEncryptionKeyArn
            self.description = description
            self.foundationModel = foundationModel
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.instruction = instruction
            self.promptOverrideConfiguration = promptOverrideConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.agentId, name: "agentId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.agentName, name: "agentName", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.agentResourceRoleArn, name: "agentResourceRoleArn", parent: name, max: 2048)
            try self.validate(self.agentResourceRoleArn, name: "agentResourceRoleArn", parent: name, pattern: "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?AmazonBedrockExecutionRoleForAgents.+$")
            try self.validate(self.customerEncryptionKeyArn, name: "customerEncryptionKeyArn", parent: name, max: 2048)
            try self.validate(self.customerEncryptionKeyArn, name: "customerEncryptionKeyArn", parent: name, min: 1)
            try self.validate(self.customerEncryptionKeyArn, name: "customerEncryptionKeyArn", parent: name, pattern: "^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.foundationModel, name: "foundationModel", parent: name, max: 2048)
            try self.validate(self.foundationModel, name: "foundationModel", parent: name, min: 1)
            try self.validate(self.foundationModel, name: "foundationModel", parent: name, pattern: "(^[a-zA-Z0-9-_.]+$)|(^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:(([0-9]{12}:custom-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}/[a-z0-9]{12})|(:foundation-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}))$)|(^([0-9a-zA-Z][_-]?)+$)|^([a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63})$")
            try self.validate(self.idleSessionTTLInSeconds, name: "idleSessionTTLInSeconds", parent: name, max: 3600)
            try self.validate(self.idleSessionTTLInSeconds, name: "idleSessionTTLInSeconds", parent: name, min: 60)
            try self.validate(self.instruction, name: "instruction", parent: name, max: 1200)
            try self.validate(self.instruction, name: "instruction", parent: name, min: 40)
            try self.promptOverrideConfiguration?.validate(name: "\(name).promptOverrideConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case agentName = "agentName"
            case agentResourceRoleArn = "agentResourceRoleArn"
            case customerEncryptionKeyArn = "customerEncryptionKeyArn"
            case description = "description"
            case foundationModel = "foundationModel"
            case idleSessionTTLInSeconds = "idleSessionTTLInSeconds"
            case instruction = "instruction"
            case promptOverrideConfiguration = "promptOverrideConfiguration"
        }
    }

    public struct UpdateAgentResponse: AWSDecodableShape {
        public let agent: Agent

        public init(agent: Agent) {
            self.agent = agent
        }

        private enum CodingKeys: String, CodingKey {
            case agent = "agent"
        }
    }

    public struct UpdateDataSourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "dataSourceId", location: .uri("dataSourceId")),
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let dataSourceConfiguration: DataSourceConfiguration
        public let dataSourceId: String
        public let description: String?
        public let knowledgeBaseId: String
        public let name: String
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
        public let vectorIngestionConfiguration: VectorIngestionConfiguration?

        public init(dataSourceConfiguration: DataSourceConfiguration, dataSourceId: String, description: String? = nil, knowledgeBaseId: String, name: String, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil, vectorIngestionConfiguration: VectorIngestionConfiguration? = nil) {
            self.dataSourceConfiguration = dataSourceConfiguration
            self.dataSourceId = dataSourceId
            self.description = description
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.vectorIngestionConfiguration = vectorIngestionConfiguration
        }

        public func validate(name: String) throws {
            try self.dataSourceConfiguration.validate(name: "\(name).dataSourceConfiguration")
            try self.validate(self.dataSourceId, name: "dataSourceId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.name, name: "name", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.serverSideEncryptionConfiguration?.validate(name: "\(name).serverSideEncryptionConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceConfiguration = "dataSourceConfiguration"
            case description = "description"
            case name = "name"
            case serverSideEncryptionConfiguration = "serverSideEncryptionConfiguration"
            case vectorIngestionConfiguration = "vectorIngestionConfiguration"
        }
    }

    public struct UpdateDataSourceResponse: AWSDecodableShape {
        public let dataSource: DataSource

        public init(dataSource: DataSource) {
            self.dataSource = dataSource
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
        }
    }

    public struct UpdateKnowledgeBaseRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "knowledgeBaseId", location: .uri("knowledgeBaseId"))
        ]

        public let description: String?
        public let knowledgeBaseConfiguration: KnowledgeBaseConfiguration
        public let knowledgeBaseId: String
        public let name: String
        public let roleArn: String
        public let storageConfiguration: StorageConfiguration

        public init(description: String? = nil, knowledgeBaseConfiguration: KnowledgeBaseConfiguration, knowledgeBaseId: String, name: String, roleArn: String, storageConfiguration: StorageConfiguration) {
            self.description = description
            self.knowledgeBaseConfiguration = knowledgeBaseConfiguration
            self.knowledgeBaseId = knowledgeBaseId
            self.name = name
            self.roleArn = roleArn
            self.storageConfiguration = storageConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.knowledgeBaseConfiguration.validate(name: "\(name).knowledgeBaseConfiguration")
            try self.validate(self.knowledgeBaseId, name: "knowledgeBaseId", parent: name, pattern: "^[0-9a-zA-Z]{10}$")
            try self.validate(self.name, name: "name", parent: name, pattern: "^([0-9a-zA-Z][_-]?){1,100}$")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?AmazonBedrockExecutionRoleForKnowledgeBase.+$")
            try self.storageConfiguration.validate(name: "\(name).storageConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case knowledgeBaseConfiguration = "knowledgeBaseConfiguration"
            case name = "name"
            case roleArn = "roleArn"
            case storageConfiguration = "storageConfiguration"
        }
    }

    public struct UpdateKnowledgeBaseResponse: AWSDecodableShape {
        public let knowledgeBase: KnowledgeBase

        public init(knowledgeBase: KnowledgeBase) {
            self.knowledgeBase = knowledgeBase
        }

        private enum CodingKeys: String, CodingKey {
            case knowledgeBase = "knowledgeBase"
        }
    }

    public struct VectorIngestionConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let chunkingConfiguration: ChunkingConfiguration?

        public init(chunkingConfiguration: ChunkingConfiguration? = nil) {
            self.chunkingConfiguration = chunkingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case chunkingConfiguration = "chunkingConfiguration"
        }
    }

    public struct VectorKnowledgeBaseConfiguration: AWSEncodableShape & AWSDecodableShape {
        public let embeddingModelArn: String

        public init(embeddingModelArn: String) {
            self.embeddingModelArn = embeddingModelArn
        }

        public func validate(name: String) throws {
            try self.validate(self.embeddingModelArn, name: "embeddingModelArn", parent: name, max: 1011)
            try self.validate(self.embeddingModelArn, name: "embeddingModelArn", parent: name, min: 20)
            try self.validate(self.embeddingModelArn, name: "embeddingModelArn", parent: name, pattern: "^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:(([0-9]{12}:custom-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}/[a-z0-9]{12})|(:foundation-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}))$")
        }

        private enum CodingKeys: String, CodingKey {
            case embeddingModelArn = "embeddingModelArn"
        }
    }

    public struct ActionGroupExecutor: AWSEncodableShape & AWSDecodableShape {
        public let lambda: String?

        public init(lambda: String? = nil) {
            self.lambda = lambda
        }

        public func validate(name: String) throws {
            try self.validate(self.lambda, name: "lambda", parent: name, max: 2048)
            try self.validate(self.lambda, name: "lambda", parent: name, pattern: "^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$")
        }

        private enum CodingKeys: String, CodingKey {
            case lambda = "lambda"
        }
    }
}

// MARK: - Errors

/// Error enum for BedrockAgent
public struct BedrockAgentErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case conflictException = "ConflictException"
        case internalServerException = "InternalServerException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceQuotaExceededException = "ServiceQuotaExceededException"
        case throttlingException = "ThrottlingException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize BedrockAgent
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// This exception is thrown when a request is denied per access permissions
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// This exception is thrown when there is a conflict performing an operation
    public static var conflictException: Self { .init(.conflictException) }
    /// This exception is thrown if there was an unexpected error during processing of request
    public static var internalServerException: Self { .init(.internalServerException) }
    /// This exception is thrown when a resource referenced by the operation does not exist
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// This exception is thrown when a request is made beyond the service quota
    public static var serviceQuotaExceededException: Self { .init(.serviceQuotaExceededException) }
    /// This exception is thrown when the number of requests exceeds the limit
    public static var throttlingException: Self { .init(.throttlingException) }
    /// This exception is thrown when the request's input validation fails
    public static var validationException: Self { .init(.validationException) }
}

extension BedrockAgentErrorType: Equatable {
    public static func == (lhs: BedrockAgentErrorType, rhs: BedrockAgentErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension BedrockAgentErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
