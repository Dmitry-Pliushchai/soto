//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MarketplaceAgreement {
    // MARK: Async API Calls

    /// Provides details about an agreement, such as the proposer, acceptor, start date, and end date.
    public func describeAgreement(_ input: DescribeAgreementInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAgreementOutput {
        return try await self.client.execute(operation: "DescribeAgreement", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Obtains details about the terms in an agreement that you participated in as proposer or acceptor. The details include:    TermType – The type of term, such as LegalTerm, RenewalTerm, or ConfigurableUpfrontPricingTerm.    TermID – The ID of the particular term, which is common between offer and agreement.    TermPayload – The key information contained in the term, such as the EULA for LegalTerm or pricing and dimensions for various pricing terms, such as ConfigurableUpfrontPricingTerm or UsageBasedPricingTerm.      Configuration – The buyer/acceptor's selection at the time of agreement creation, such as the number of units purchased for a dimension or setting the EnableAutoRenew flag.
    public func getAgreementTerms(_ input: GetAgreementTermsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAgreementTermsOutput {
        return try await self.client.execute(operation: "GetAgreementTerms", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Searches across all agreements that a proposer or an acceptor has in AWS Marketplace. The search returns a list of agreements with basic agreement information. The following filter combinations are supported:    PartyType as Proposer + AgreementType + ResourceIdentifier     PartyType as Proposer + AgreementType + OfferId     PartyType as Proposer + AgreementType + AcceptorAccountId     PartyType as Proposer + AgreementType + Status     PartyType as Proposer + AgreementType + ResourceIdentifier + Status     PartyType as Proposer + AgreementType + OfferId + Status     PartyType as Proposer + AgreementType + AcceptorAccountId + Status     PartyType as Proposer + AgreementType + ResourceType + Status     PartyType as Proposer + AgreementType + AcceptorAccountId + ResourceType + Status     PartyType as Proposer + AgreementType + AcceptorAccountId + OfferId     PartyType as Proposer + AgreementType + AcceptorAccountId + OfferId + Status     PartyType as Proposer + AgreementType + AcceptorAccountId + ResourceIdentifier     PartyType as Proposer + AgreementType + AcceptorAccountId + ResourceIdentifier + Status     PartyType as Proposer + AgreementType + AcceptorAccountId + ResourceType
    public func searchAgreements(_ input: SearchAgreementsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchAgreementsOutput {
        return try await self.client.execute(operation: "SearchAgreements", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}
