//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DataZone {
    // MARK: Async API Calls

    /// Accepts automatically generated business-friendly metadata for your Amazon DataZone assets.
    public func acceptPredictions(_ input: AcceptPredictionsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AcceptPredictionsOutput {
        return try await self.client.execute(operation: "AcceptPredictions", path: "/v2/domains/{domainIdentifier}/assets/{identifier}/accept-predictions", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Accepts a subscription request to a specific asset.
    public func acceptSubscriptionRequest(_ input: AcceptSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AcceptSubscriptionRequestOutput {
        return try await self.client.execute(operation: "AcceptSubscriptionRequest", path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/accept", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Cancels the subscription to the specified asset.
    public func cancelSubscription(_ input: CancelSubscriptionInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelSubscriptionOutput {
        return try await self.client.execute(operation: "CancelSubscription", path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/cancel", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an asset in Amazon DataZone catalog.
    public func createAsset(_ input: CreateAssetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetOutput {
        return try await self.client.execute(operation: "CreateAsset", path: "/v2/domains/{domainIdentifier}/assets", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a revision of the asset.
    public func createAssetRevision(_ input: CreateAssetRevisionInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetRevisionOutput {
        return try await self.client.execute(operation: "CreateAssetRevision", path: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a custom asset type.
    public func createAssetType(_ input: CreateAssetTypeInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetTypeOutput {
        return try await self.client.execute(operation: "CreateAssetType", path: "/v2/domains/{domainIdentifier}/asset-types", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an Amazon DataZone data source.
    public func createDataSource(_ input: CreateDataSourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDataSourceOutput {
        return try await self.client.execute(operation: "CreateDataSource", path: "/v2/domains/{domainIdentifier}/data-sources", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an Amazon DataZone domain.
    public func createDomain(_ input: CreateDomainInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDomainOutput {
        return try await self.client.execute(operation: "CreateDomain", path: "/v2/domains", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Create an Amazon DataZone environment.
    public func createEnvironment(_ input: CreateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEnvironmentOutput {
        return try await self.client.execute(operation: "CreateEnvironment", path: "/v2/domains/{domainIdentifier}/environments", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an Amazon DataZone environment profile.
    public func createEnvironmentProfile(_ input: CreateEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEnvironmentProfileOutput {
        return try await self.client.execute(operation: "CreateEnvironmentProfile", path: "/v2/domains/{domainIdentifier}/environment-profiles", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a metadata form type.
    public func createFormType(_ input: CreateFormTypeInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFormTypeOutput {
        return try await self.client.execute(operation: "CreateFormType", path: "/v2/domains/{domainIdentifier}/form-types", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an Amazon DataZone business glossary.
    public func createGlossary(_ input: CreateGlossaryInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGlossaryOutput {
        return try await self.client.execute(operation: "CreateGlossary", path: "/v2/domains/{domainIdentifier}/glossaries", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a business glossary term.
    public func createGlossaryTerm(_ input: CreateGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGlossaryTermOutput {
        return try await self.client.execute(operation: "CreateGlossaryTerm", path: "/v2/domains/{domainIdentifier}/glossary-terms", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a group profile in Amazon DataZone.
    public func createGroupProfile(_ input: CreateGroupProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGroupProfileOutput {
        return try await self.client.execute(operation: "CreateGroupProfile", path: "/v2/domains/{domainIdentifier}/group-profiles", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    public func createListingChangeSet(_ input: CreateListingChangeSetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateListingChangeSetOutput {
        return try await self.client.execute(operation: "CreateListingChangeSet", path: "/v2/domains/{domainIdentifier}/listings/change-set", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an Amazon DataZone project.
    public func createProject(_ input: CreateProjectInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProjectOutput {
        return try await self.client.execute(operation: "CreateProject", path: "/v2/domains/{domainIdentifier}/projects", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a project membership in Amazon DataZone.
    public func createProjectMembership(_ input: CreateProjectMembershipInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProjectMembershipOutput {
        return try await self.client.execute(operation: "CreateProjectMembership", path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/createMembership", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a subsscription grant in Amazon DataZone.
    public func createSubscriptionGrant(_ input: CreateSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSubscriptionGrantOutput {
        return try await self.client.execute(operation: "CreateSubscriptionGrant", path: "/v2/domains/{domainIdentifier}/subscription-grants", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a subscription request in Amazon DataZone.
    public func createSubscriptionRequest(_ input: CreateSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSubscriptionRequestOutput {
        return try await self.client.execute(operation: "CreateSubscriptionRequest", path: "/v2/domains/{domainIdentifier}/subscription-requests", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a subscription target in Amazon DataZone.
    public func createSubscriptionTarget(_ input: CreateSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSubscriptionTargetOutput {
        return try await self.client.execute(operation: "CreateSubscriptionTarget", path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a user profile in Amazon DataZone.
    public func createUserProfile(_ input: CreateUserProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserProfileOutput {
        return try await self.client.execute(operation: "CreateUserProfile", path: "/v2/domains/{domainIdentifier}/user-profiles", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Delets an asset in Amazon DataZone.
    public func deleteAsset(_ input: DeleteAssetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAssetOutput {
        return try await self.client.execute(operation: "DeleteAsset", path: "/v2/domains/{domainIdentifier}/assets/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes an asset type in Amazon DataZone.
    public func deleteAssetType(_ input: DeleteAssetTypeInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAssetTypeOutput {
        return try await self.client.execute(operation: "DeleteAssetType", path: "/v2/domains/{domainIdentifier}/asset-types/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a data source in Amazon DataZone.
    public func deleteDataSource(_ input: DeleteDataSourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDataSourceOutput {
        return try await self.client.execute(operation: "DeleteDataSource", path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a Amazon DataZone domain.
    public func deleteDomain(_ input: DeleteDomainInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDomainOutput {
        return try await self.client.execute(operation: "DeleteDomain", path: "/v2/domains/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes an environment in Amazon DataZone.
    public func deleteEnvironment(_ input: DeleteEnvironmentInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteEnvironment", path: "/v2/domains/{domainIdentifier}/environments/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the blueprint configuration in Amazon DataZone.
    public func deleteEnvironmentBlueprintConfiguration(_ input: DeleteEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEnvironmentBlueprintConfigurationOutput {
        return try await self.client.execute(operation: "DeleteEnvironmentBlueprintConfiguration", path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes an environment profile in Amazon DataZone.
    public func deleteEnvironmentProfile(_ input: DeleteEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteEnvironmentProfile", path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Delets and metadata form type in Amazon DataZone.
    public func deleteFormType(_ input: DeleteFormTypeInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteFormTypeOutput {
        return try await self.client.execute(operation: "DeleteFormType", path: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a business glossary in Amazon DataZone.
    public func deleteGlossary(_ input: DeleteGlossaryInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteGlossaryOutput {
        return try await self.client.execute(operation: "DeleteGlossary", path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a business glossary term in Amazon DataZone.
    public func deleteGlossaryTerm(_ input: DeleteGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteGlossaryTermOutput {
        return try await self.client.execute(operation: "DeleteGlossaryTerm", path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    public func deleteListing(_ input: DeleteListingInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteListingOutput {
        return try await self.client.execute(operation: "DeleteListing", path: "/v2/domains/{domainIdentifier}/listings/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a project in Amazon DataZone.
    public func deleteProject(_ input: DeleteProjectInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteProjectOutput {
        return try await self.client.execute(operation: "DeleteProject", path: "/v2/domains/{domainIdentifier}/projects/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes project membership in Amazon DataZone.
    public func deleteProjectMembership(_ input: DeleteProjectMembershipInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteProjectMembershipOutput {
        return try await self.client.execute(operation: "DeleteProjectMembership", path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/deleteMembership", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes and subscription grant in Amazon DataZone.
    public func deleteSubscriptionGrant(_ input: DeleteSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSubscriptionGrantOutput {
        return try await self.client.execute(operation: "DeleteSubscriptionGrant", path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a subscription request in Amazon DataZone.
    public func deleteSubscriptionRequest(_ input: DeleteSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteSubscriptionRequest", path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a subscription target in Amazon DataZone.
    public func deleteSubscriptionTarget(_ input: DeleteSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteSubscriptionTarget", path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone asset.
    public func getAsset(_ input: GetAssetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAssetOutput {
        return try await self.client.execute(operation: "GetAsset", path: "/v2/domains/{domainIdentifier}/assets/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone asset type.
    public func getAssetType(_ input: GetAssetTypeInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAssetTypeOutput {
        return try await self.client.execute(operation: "GetAssetType", path: "/v2/domains/{domainIdentifier}/asset-types/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone data source.
    public func getDataSource(_ input: GetDataSourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDataSourceOutput {
        return try await self.client.execute(operation: "GetDataSource", path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone data source run.
    public func getDataSourceRun(_ input: GetDataSourceRunInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDataSourceRunOutput {
        return try await self.client.execute(operation: "GetDataSourceRun", path: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone domain.
    public func getDomain(_ input: GetDomainInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDomainOutput {
        return try await self.client.execute(operation: "GetDomain", path: "/v2/domains/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone environment.
    public func getEnvironment(_ input: GetEnvironmentInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetEnvironmentOutput {
        return try await self.client.execute(operation: "GetEnvironment", path: "/v2/domains/{domainIdentifier}/environments/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an Amazon DataZone blueprint.
    public func getEnvironmentBlueprint(_ input: GetEnvironmentBlueprintInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetEnvironmentBlueprintOutput {
        return try await self.client.execute(operation: "GetEnvironmentBlueprint", path: "/v2/domains/{domainIdentifier}/environment-blueprints/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets the blueprint configuration in Amazon DataZone.
    public func getEnvironmentBlueprintConfiguration(_ input: GetEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetEnvironmentBlueprintConfigurationOutput {
        return try await self.client.execute(operation: "GetEnvironmentBlueprintConfiguration", path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets an evinronment profile in Amazon DataZone.
    public func getEnvironmentProfile(_ input: GetEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetEnvironmentProfileOutput {
        return try await self.client.execute(operation: "GetEnvironmentProfile", path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a metadata form type in Amazon DataZone.
    public func getFormType(_ input: GetFormTypeInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetFormTypeOutput {
        return try await self.client.execute(operation: "GetFormType", path: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a business glossary in Amazon DataZone.
    public func getGlossary(_ input: GetGlossaryInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetGlossaryOutput {
        return try await self.client.execute(operation: "GetGlossary", path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a business glossary term in Amazon DataZone.
    public func getGlossaryTerm(_ input: GetGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetGlossaryTermOutput {
        return try await self.client.execute(operation: "GetGlossaryTerm", path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a group profile in Amazon DataZone.
    public func getGroupProfile(_ input: GetGroupProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetGroupProfileOutput {
        return try await self.client.execute(operation: "GetGroupProfile", path: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets the data portal URL for the specified Amazon DataZone domain.
    public func getIamPortalLoginUrl(_ input: GetIamPortalLoginUrlInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetIamPortalLoginUrlOutput {
        return try await self.client.execute(operation: "GetIamPortalLoginUrl", path: "/v2/domains/{domainIdentifier}/get-portal-login-url", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    public func getListing(_ input: GetListingInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetListingOutput {
        return try await self.client.execute(operation: "GetListing", path: "/v2/domains/{domainIdentifier}/listings/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a project in Amazon DataZone.
    public func getProject(_ input: GetProjectInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetProjectOutput {
        return try await self.client.execute(operation: "GetProject", path: "/v2/domains/{domainIdentifier}/projects/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a subscription in Amazon DataZone.
    public func getSubscription(_ input: GetSubscriptionInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSubscriptionOutput {
        return try await self.client.execute(operation: "GetSubscription", path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets the subscription grant in Amazon DataZone.
    public func getSubscriptionGrant(_ input: GetSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSubscriptionGrantOutput {
        return try await self.client.execute(operation: "GetSubscriptionGrant", path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets the details of the specified subscription request.
    public func getSubscriptionRequestDetails(_ input: GetSubscriptionRequestDetailsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSubscriptionRequestDetailsOutput {
        return try await self.client.execute(operation: "GetSubscriptionRequestDetails", path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets the subscription target in Amazon DataZone.
    public func getSubscriptionTarget(_ input: GetSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSubscriptionTargetOutput {
        return try await self.client.execute(operation: "GetSubscriptionTarget", path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a user profile in Amazon DataZone.
    public func getUserProfile(_ input: GetUserProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetUserProfileOutput {
        return try await self.client.execute(operation: "GetUserProfile", path: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists the revisions for the asset.
    public func listAssetRevisions(_ input: ListAssetRevisionsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAssetRevisionsOutput {
        return try await self.client.execute(operation: "ListAssetRevisions", path: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists data source run activities.
    public func listDataSourceRunActivities(_ input: ListDataSourceRunActivitiesInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDataSourceRunActivitiesOutput {
        return try await self.client.execute(operation: "ListDataSourceRunActivities", path: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}/activities", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists data source runs in Amazon DataZone.
    public func listDataSourceRuns(_ input: ListDataSourceRunsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDataSourceRunsOutput {
        return try await self.client.execute(operation: "ListDataSourceRuns", path: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists data sources in Amazon DataZone.
    public func listDataSources(_ input: ListDataSourcesInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDataSourcesOutput {
        return try await self.client.execute(operation: "ListDataSources", path: "/v2/domains/{domainIdentifier}/data-sources", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists Amazon DataZone domains.
    public func listDomains(_ input: ListDomainsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDomainsOutput {
        return try await self.client.execute(operation: "ListDomains", path: "/v2/domains", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists blueprint configurations for a Amazon DataZone environment.
    public func listEnvironmentBlueprintConfigurations(_ input: ListEnvironmentBlueprintConfigurationsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEnvironmentBlueprintConfigurationsOutput {
        return try await self.client.execute(operation: "ListEnvironmentBlueprintConfigurations", path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists blueprints in an Amazon DataZone environment.
    public func listEnvironmentBlueprints(_ input: ListEnvironmentBlueprintsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEnvironmentBlueprintsOutput {
        return try await self.client.execute(operation: "ListEnvironmentBlueprints", path: "/v2/domains/{domainIdentifier}/environment-blueprints", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists Amazon DataZone environment profiles.
    public func listEnvironmentProfiles(_ input: ListEnvironmentProfilesInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEnvironmentProfilesOutput {
        return try await self.client.execute(operation: "ListEnvironmentProfiles", path: "/v2/domains/{domainIdentifier}/environment-profiles", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists Amazon DataZone environments.
    public func listEnvironments(_ input: ListEnvironmentsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEnvironmentsOutput {
        return try await self.client.execute(operation: "ListEnvironments", path: "/v2/domains/{domainIdentifier}/environments", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists all Amazon DataZone notifications.
    public func listNotifications(_ input: ListNotificationsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListNotificationsOutput {
        return try await self.client.execute(operation: "ListNotifications", path: "/v2/domains/{domainIdentifier}/notifications", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists all members of the specified project.
    public func listProjectMemberships(_ input: ListProjectMembershipsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListProjectMembershipsOutput {
        return try await self.client.execute(operation: "ListProjectMemberships", path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/memberships", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists Amazon DataZone projects.
    public func listProjects(_ input: ListProjectsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListProjectsOutput {
        return try await self.client.execute(operation: "ListProjects", path: "/v2/domains/{domainIdentifier}/projects", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists subscription grants.
    public func listSubscriptionGrants(_ input: ListSubscriptionGrantsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListSubscriptionGrantsOutput {
        return try await self.client.execute(operation: "ListSubscriptionGrants", path: "/v2/domains/{domainIdentifier}/subscription-grants", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists Amazon DataZone subscription requests.
    public func listSubscriptionRequests(_ input: ListSubscriptionRequestsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListSubscriptionRequestsOutput {
        return try await self.client.execute(operation: "ListSubscriptionRequests", path: "/v2/domains/{domainIdentifier}/subscription-requests", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists subscription targets in Amazon DataZone.
    public func listSubscriptionTargets(_ input: ListSubscriptionTargetsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListSubscriptionTargetsOutput {
        return try await self.client.execute(operation: "ListSubscriptionTargets", path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists subscriptions in Amazon DataZone.
    public func listSubscriptions(_ input: ListSubscriptionsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListSubscriptionsOutput {
        return try await self.client.execute(operation: "ListSubscriptions", path: "/v2/domains/{domainIdentifier}/subscriptions", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists tags for the specified resource in Amazon DataZone.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Writes the configuration for the specified environment blueprint in Amazon DataZone.
    public func putEnvironmentBlueprintConfiguration(_ input: PutEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PutEnvironmentBlueprintConfigurationOutput {
        return try await self.client.execute(operation: "PutEnvironmentBlueprintConfiguration", path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Rejects automatically generated business-friendly metadata for your Amazon DataZone assets.
    public func rejectPredictions(_ input: RejectPredictionsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RejectPredictionsOutput {
        return try await self.client.execute(operation: "RejectPredictions", path: "/v2/domains/{domainIdentifier}/assets/{identifier}/reject-predictions", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Rejects the specified subscription request.
    public func rejectSubscriptionRequest(_ input: RejectSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RejectSubscriptionRequestOutput {
        return try await self.client.execute(operation: "RejectSubscriptionRequest", path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/reject", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Revokes a specified subscription in Amazon DataZone.
    public func revokeSubscription(_ input: RevokeSubscriptionInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RevokeSubscriptionOutput {
        return try await self.client.execute(operation: "RevokeSubscription", path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/revoke", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Searches for assets in Amazon DataZone.
    public func search(_ input: SearchInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchOutput {
        return try await self.client.execute(operation: "Search", path: "/v2/domains/{domainIdentifier}/search", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Searches group profiles in Amazon DataZone.
    public func searchGroupProfiles(_ input: SearchGroupProfilesInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchGroupProfilesOutput {
        return try await self.client.execute(operation: "SearchGroupProfiles", path: "/v2/domains/{domainIdentifier}/search-group-profiles", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Searches listings in Amazon DataZone.
    public func searchListings(_ input: SearchListingsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchListingsOutput {
        return try await self.client.execute(operation: "SearchListings", path: "/v2/domains/{domainIdentifier}/listings/search", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Searches for types in Amazon DataZone.
    public func searchTypes(_ input: SearchTypesInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchTypesOutput {
        return try await self.client.execute(operation: "SearchTypes", path: "/v2/domains/{domainIdentifier}/types-search", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Searches user profiles in Amazon DataZone.
    public func searchUserProfiles(_ input: SearchUserProfilesInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchUserProfilesOutput {
        return try await self.client.execute(operation: "SearchUserProfiles", path: "/v2/domains/{domainIdentifier}/search-user-profiles", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Start the run of the specified data source in Amazon DataZone.
    public func startDataSourceRun(_ input: StartDataSourceRunInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartDataSourceRunOutput {
        return try await self.client.execute(operation: "StartDataSourceRun", path: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Tags a resource in Amazon DataZone.
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TagResourceResponse {
        return try await self.client.execute(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Untags a resource in Amazon DataZone.
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UntagResourceResponse {
        return try await self.client.execute(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified data source in Amazon DataZone.
    public func updateDataSource(_ input: UpdateDataSourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDataSourceOutput {
        return try await self.client.execute(operation: "UpdateDataSource", path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates a Amazon DataZone domain.
    public func updateDomain(_ input: UpdateDomainInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDomainOutput {
        return try await self.client.execute(operation: "UpdateDomain", path: "/v2/domains/{identifier}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified environment in Amazon DataZone.
    public func updateEnvironment(_ input: UpdateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateEnvironmentOutput {
        return try await self.client.execute(operation: "UpdateEnvironment", path: "/v2/domains/{domainIdentifier}/environments/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified environment profile in Amazon DataZone.
    public func updateEnvironmentProfile(_ input: UpdateEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateEnvironmentProfileOutput {
        return try await self.client.execute(operation: "UpdateEnvironmentProfile", path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the business glossary in Amazon DataZone.
    public func updateGlossary(_ input: UpdateGlossaryInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGlossaryOutput {
        return try await self.client.execute(operation: "UpdateGlossary", path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates a business glossary term in Amazon DataZone.
    public func updateGlossaryTerm(_ input: UpdateGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGlossaryTermOutput {
        return try await self.client.execute(operation: "UpdateGlossaryTerm", path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified group profile in Amazon DataZone.
    public func updateGroupProfile(_ input: UpdateGroupProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGroupProfileOutput {
        return try await self.client.execute(operation: "UpdateGroupProfile", path: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified project in Amazon DataZone.
    public func updateProject(_ input: UpdateProjectInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateProjectOutput {
        return try await self.client.execute(operation: "UpdateProject", path: "/v2/domains/{domainIdentifier}/projects/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the status of the specified subscription grant status in Amazon DataZone.
    public func updateSubscriptionGrantStatus(_ input: UpdateSubscriptionGrantStatusInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateSubscriptionGrantStatusOutput {
        return try await self.client.execute(operation: "UpdateSubscriptionGrantStatus", path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}/status/{assetIdentifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates a specified subscription request in Amazon DataZone.
    public func updateSubscriptionRequest(_ input: UpdateSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateSubscriptionRequestOutput {
        return try await self.client.execute(operation: "UpdateSubscriptionRequest", path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified subscription target in Amazon DataZone.
    public func updateSubscriptionTarget(_ input: UpdateSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateSubscriptionTargetOutput {
        return try await self.client.execute(operation: "UpdateSubscriptionTarget", path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the specified user profile in Amazon DataZone.
    public func updateUserProfile(_ input: UpdateUserProfileInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateUserProfileOutput {
        return try await self.client.execute(operation: "UpdateUserProfile", path: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DataZone {
    /// Lists data source run activities.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDataSourceRunActivitiesPaginator(
        _ input: ListDataSourceRunActivitiesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunActivitiesInput, ListDataSourceRunActivitiesOutput> {
        return .init(
            input: input,
            command: self.listDataSourceRunActivities,
            inputKey: \ListDataSourceRunActivitiesInput.nextToken,
            outputKey: \ListDataSourceRunActivitiesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists data source runs in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDataSourceRunsPaginator(
        _ input: ListDataSourceRunsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunsInput, ListDataSourceRunsOutput> {
        return .init(
            input: input,
            command: self.listDataSourceRuns,
            inputKey: \ListDataSourceRunsInput.nextToken,
            outputKey: \ListDataSourceRunsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists data sources in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDataSourcesPaginator(
        _ input: ListDataSourcesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDataSourcesInput, ListDataSourcesOutput> {
        return .init(
            input: input,
            command: self.listDataSources,
            inputKey: \ListDataSourcesInput.nextToken,
            outputKey: \ListDataSourcesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists Amazon DataZone domains.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDomainsPaginator(
        _ input: ListDomainsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDomainsInput, ListDomainsOutput> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsInput.nextToken,
            outputKey: \ListDomainsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists blueprint configurations for a Amazon DataZone environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listEnvironmentBlueprintConfigurationsPaginator(
        _ input: ListEnvironmentBlueprintConfigurationsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintConfigurationsInput, ListEnvironmentBlueprintConfigurationsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentBlueprintConfigurations,
            inputKey: \ListEnvironmentBlueprintConfigurationsInput.nextToken,
            outputKey: \ListEnvironmentBlueprintConfigurationsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists blueprints in an Amazon DataZone environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listEnvironmentBlueprintsPaginator(
        _ input: ListEnvironmentBlueprintsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintsInput, ListEnvironmentBlueprintsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentBlueprints,
            inputKey: \ListEnvironmentBlueprintsInput.nextToken,
            outputKey: \ListEnvironmentBlueprintsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists Amazon DataZone environment profiles.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listEnvironmentProfilesPaginator(
        _ input: ListEnvironmentProfilesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListEnvironmentProfilesInput, ListEnvironmentProfilesOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentProfiles,
            inputKey: \ListEnvironmentProfilesInput.nextToken,
            outputKey: \ListEnvironmentProfilesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists Amazon DataZone environments.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listEnvironmentsPaginator(
        _ input: ListEnvironmentsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
        return .init(
            input: input,
            command: self.listEnvironments,
            inputKey: \ListEnvironmentsInput.nextToken,
            outputKey: \ListEnvironmentsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists all Amazon DataZone notifications.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listNotificationsPaginator(
        _ input: ListNotificationsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListNotificationsInput, ListNotificationsOutput> {
        return .init(
            input: input,
            command: self.listNotifications,
            inputKey: \ListNotificationsInput.nextToken,
            outputKey: \ListNotificationsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists all members of the specified project.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listProjectMembershipsPaginator(
        _ input: ListProjectMembershipsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListProjectMembershipsInput, ListProjectMembershipsOutput> {
        return .init(
            input: input,
            command: self.listProjectMemberships,
            inputKey: \ListProjectMembershipsInput.nextToken,
            outputKey: \ListProjectMembershipsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists Amazon DataZone projects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        return .init(
            input: input,
            command: self.listProjects,
            inputKey: \ListProjectsInput.nextToken,
            outputKey: \ListProjectsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists subscription grants.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSubscriptionGrantsPaginator(
        _ input: ListSubscriptionGrantsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSubscriptionGrantsInput, ListSubscriptionGrantsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionGrants,
            inputKey: \ListSubscriptionGrantsInput.nextToken,
            outputKey: \ListSubscriptionGrantsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists Amazon DataZone subscription requests.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSubscriptionRequestsPaginator(
        _ input: ListSubscriptionRequestsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSubscriptionRequestsInput, ListSubscriptionRequestsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionRequests,
            inputKey: \ListSubscriptionRequestsInput.nextToken,
            outputKey: \ListSubscriptionRequestsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists subscription targets in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSubscriptionTargetsPaginator(
        _ input: ListSubscriptionTargetsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSubscriptionTargetsInput, ListSubscriptionTargetsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionTargets,
            inputKey: \ListSubscriptionTargetsInput.nextToken,
            outputKey: \ListSubscriptionTargetsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists subscriptions in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSubscriptionsPaginator(
        _ input: ListSubscriptionsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsInput, ListSubscriptionsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptions,
            inputKey: \ListSubscriptionsInput.nextToken,
            outputKey: \ListSubscriptionsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Searches for assets in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func searchPaginator(
        _ input: SearchInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<SearchInput, SearchOutput> {
        return .init(
            input: input,
            command: self.search,
            inputKey: \SearchInput.nextToken,
            outputKey: \SearchOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Searches group profiles in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func searchGroupProfilesPaginator(
        _ input: SearchGroupProfilesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<SearchGroupProfilesInput, SearchGroupProfilesOutput> {
        return .init(
            input: input,
            command: self.searchGroupProfiles,
            inputKey: \SearchGroupProfilesInput.nextToken,
            outputKey: \SearchGroupProfilesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Searches listings in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func searchListingsPaginator(
        _ input: SearchListingsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<SearchListingsInput, SearchListingsOutput> {
        return .init(
            input: input,
            command: self.searchListings,
            inputKey: \SearchListingsInput.nextToken,
            outputKey: \SearchListingsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Searches for types in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func searchTypesPaginator(
        _ input: SearchTypesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<SearchTypesInput, SearchTypesOutput> {
        return .init(
            input: input,
            command: self.searchTypes,
            inputKey: \SearchTypesInput.nextToken,
            outputKey: \SearchTypesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Searches user profiles in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func searchUserProfilesPaginator(
        _ input: SearchUserProfilesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<SearchUserProfilesInput, SearchUserProfilesOutput> {
        return .init(
            input: input,
            command: self.searchUserProfiles,
            inputKey: \SearchUserProfilesInput.nextToken,
            outputKey: \SearchUserProfilesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
