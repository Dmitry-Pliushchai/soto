//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CleanRoomsML {
    // MARK: Async API Calls

    /// Defines the information necessary to create an audience model. An audience model is a machine learning model that Clean Rooms ML trains to measure similarity between users. Clean Rooms ML manages training and storing the audience model. The audience model can be used in multiple calls to the StartAudienceGenerationJob API.
    public func createAudienceModel(_ input: CreateAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAudienceModelResponse {
        return try await self.client.execute(operation: "CreateAudienceModel", path: "/audience-model", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Defines the information necessary to create a configured audience model.
    public func createConfiguredAudienceModel(_ input: CreateConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConfiguredAudienceModelResponse {
        return try await self.client.execute(operation: "CreateConfiguredAudienceModel", path: "/configured-audience-model", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Defines the information necessary to create a training dataset, or seed audience. In Clean Rooms ML, the TrainingDataset is metadata that points to a Glue table, which is read only during AudienceModel creation.
    public func createTrainingDataset(_ input: CreateTrainingDatasetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTrainingDatasetResponse {
        return try await self.client.execute(operation: "CreateTrainingDataset", path: "/training-dataset", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the specified audience generation job, and removes all data associated with the job.
    public func deleteAudienceGenerationJob(_ input: DeleteAudienceGenerationJobRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteAudienceGenerationJob", path: "/audience-generation-job/{audienceGenerationJobArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Specifies an audience model that you want to delete. You can't delete an audience model if there are any configured audience models that depend on the audience model.
    public func deleteAudienceModel(_ input: DeleteAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteAudienceModel", path: "/audience-model/{audienceModelArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the specified configured audience model. You can't delete a configured audience model if there are any lookalike models that use the configured audience model. If you delete a configured audience model, it will be removed from any collaborations that it is associated to.
    public func deleteConfiguredAudienceModel(_ input: DeleteConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteConfiguredAudienceModel", path: "/configured-audience-model/{configuredAudienceModelArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the specified configured audience model policy.
    public func deleteConfiguredAudienceModelPolicy(_ input: DeleteConfiguredAudienceModelPolicyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteConfiguredAudienceModelPolicy", path: "/configured-audience-model/{configuredAudienceModelArn}/policy", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Specifies a training dataset that you want to delete. You can't delete a training dataset if there are any audience models that depend on the training dataset. In Clean Rooms ML, the TrainingDataset is metadata that points to a Glue table, which is read only during AudienceModel creation. This action deletes the metadata.
    public func deleteTrainingDataset(_ input: DeleteTrainingDatasetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "DeleteTrainingDataset", path: "/training-dataset/{trainingDatasetArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns information about an audience generation job.
    public func getAudienceGenerationJob(_ input: GetAudienceGenerationJobRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAudienceGenerationJobResponse {
        return try await self.client.execute(operation: "GetAudienceGenerationJob", path: "/audience-generation-job/{audienceGenerationJobArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns information about an audience model
    public func getAudienceModel(_ input: GetAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAudienceModelResponse {
        return try await self.client.execute(operation: "GetAudienceModel", path: "/audience-model/{audienceModelArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns information about a specified configured audience model.
    public func getConfiguredAudienceModel(_ input: GetConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetConfiguredAudienceModelResponse {
        return try await self.client.execute(operation: "GetConfiguredAudienceModel", path: "/configured-audience-model/{configuredAudienceModelArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns information about a configured audience model policy.
    public func getConfiguredAudienceModelPolicy(_ input: GetConfiguredAudienceModelPolicyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetConfiguredAudienceModelPolicyResponse {
        return try await self.client.execute(operation: "GetConfiguredAudienceModelPolicy", path: "/configured-audience-model/{configuredAudienceModelArn}/policy", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns information about a training dataset.
    public func getTrainingDataset(_ input: GetTrainingDatasetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTrainingDatasetResponse {
        return try await self.client.execute(operation: "GetTrainingDataset", path: "/training-dataset/{trainingDatasetArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of the audience export jobs.
    public func listAudienceExportJobs(_ input: ListAudienceExportJobsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAudienceExportJobsResponse {
        return try await self.client.execute(operation: "ListAudienceExportJobs", path: "/audience-export-job", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of audience generation jobs.
    public func listAudienceGenerationJobs(_ input: ListAudienceGenerationJobsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAudienceGenerationJobsResponse {
        return try await self.client.execute(operation: "ListAudienceGenerationJobs", path: "/audience-generation-job", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of audience models.
    public func listAudienceModels(_ input: ListAudienceModelsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAudienceModelsResponse {
        return try await self.client.execute(operation: "ListAudienceModels", path: "/audience-model", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of the configured audience models.
    public func listConfiguredAudienceModels(_ input: ListConfiguredAudienceModelsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListConfiguredAudienceModelsResponse {
        return try await self.client.execute(operation: "ListConfiguredAudienceModels", path: "/configured-audience-model", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of tags for a provided resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of training datasets.
    public func listTrainingDatasets(_ input: ListTrainingDatasetsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListTrainingDatasetsResponse {
        return try await self.client.execute(operation: "ListTrainingDatasets", path: "/training-dataset", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Create or update the resource policy for a configured audience model.
    public func putConfiguredAudienceModelPolicy(_ input: PutConfiguredAudienceModelPolicyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PutConfiguredAudienceModelPolicyResponse {
        return try await self.client.execute(operation: "PutConfiguredAudienceModelPolicy", path: "/configured-audience-model/{configuredAudienceModelArn}/policy", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Export an audience of a specified size after you have generated an audience.
    public func startAudienceExportJob(_ input: StartAudienceExportJobRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "StartAudienceExportJob", path: "/audience-export-job", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Information necessary to start the audience generation job.
    public func startAudienceGenerationJob(_ input: StartAudienceGenerationJobRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartAudienceGenerationJobResponse {
        return try await self.client.execute(operation: "StartAudienceGenerationJob", path: "/audience-generation-job", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Adds metadata tags to a specified resource.
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TagResourceResponse {
        return try await self.client.execute(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Removes metadata tags from a specified resource.
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UntagResourceResponse {
        return try await self.client.execute(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Provides the information necessary to update a configured audience model. Updates that impact audience generation jobs take effect when a new job starts, but do not impact currently running jobs.
    public func updateConfiguredAudienceModel(_ input: UpdateConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateConfiguredAudienceModelResponse {
        return try await self.client.execute(operation: "UpdateConfiguredAudienceModel", path: "/configured-audience-model/{configuredAudienceModelArn}", httpMethod: .PATCH, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CleanRoomsML {
    /// Returns a list of the audience export jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAudienceExportJobsPaginator(
        _ input: ListAudienceExportJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAudienceExportJobsRequest, ListAudienceExportJobsResponse> {
        return .init(
            input: input,
            command: self.listAudienceExportJobs,
            inputKey: \ListAudienceExportJobsRequest.nextToken,
            outputKey: \ListAudienceExportJobsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of audience generation jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAudienceGenerationJobsPaginator(
        _ input: ListAudienceGenerationJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAudienceGenerationJobsRequest, ListAudienceGenerationJobsResponse> {
        return .init(
            input: input,
            command: self.listAudienceGenerationJobs,
            inputKey: \ListAudienceGenerationJobsRequest.nextToken,
            outputKey: \ListAudienceGenerationJobsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of audience models.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAudienceModelsPaginator(
        _ input: ListAudienceModelsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAudienceModelsRequest, ListAudienceModelsResponse> {
        return .init(
            input: input,
            command: self.listAudienceModels,
            inputKey: \ListAudienceModelsRequest.nextToken,
            outputKey: \ListAudienceModelsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of the configured audience models.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listConfiguredAudienceModelsPaginator(
        _ input: ListConfiguredAudienceModelsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListConfiguredAudienceModelsRequest, ListConfiguredAudienceModelsResponse> {
        return .init(
            input: input,
            command: self.listConfiguredAudienceModels,
            inputKey: \ListConfiguredAudienceModelsRequest.nextToken,
            outputKey: \ListConfiguredAudienceModelsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of training datasets.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listTrainingDatasetsPaginator(
        _ input: ListTrainingDatasetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListTrainingDatasetsRequest, ListTrainingDatasetsResponse> {
        return .init(
            input: input,
            command: self.listTrainingDatasets,
            inputKey: \ListTrainingDatasetsRequest.nextToken,
            outputKey: \ListTrainingDatasetsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
