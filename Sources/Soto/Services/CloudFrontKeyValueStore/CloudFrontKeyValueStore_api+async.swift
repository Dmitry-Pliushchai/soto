//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFrontKeyValueStore {
    // MARK: Async API Calls

    /// Deletes the key value pair specified by the key.
    public func deleteKey(_ input: DeleteKeyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteKeyResponse {
        return try await self.client.execute(operation: "DeleteKey", path: "/key-value-stores/{KvsARN}/keys/{Key}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns metadata information about Key Value Store.
    public func describeKeyValueStore(_ input: DescribeKeyValueStoreRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKeyValueStoreResponse {
        return try await self.client.execute(operation: "DescribeKeyValueStore", path: "/key-value-stores/{KvsARN}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a key value pair.
    public func getKey(_ input: GetKeyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKeyResponse {
        return try await self.client.execute(operation: "GetKey", path: "/key-value-stores/{KvsARN}/keys/{Key}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of key value pairs.
    public func listKeys(_ input: ListKeysRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKeysResponse {
        return try await self.client.execute(operation: "ListKeys", path: "/key-value-stores/{KvsARN}/keys", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a new key value pair or replaces the value of an existing key.
    public func putKey(_ input: PutKeyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PutKeyResponse {
        return try await self.client.execute(operation: "PutKey", path: "/key-value-stores/{KvsARN}/keys/{Key}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Puts or Deletes multiple key value pairs in a single, all-or-nothing operation.
    public func updateKeys(_ input: UpdateKeysRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateKeysResponse {
        return try await self.client.execute(operation: "UpdateKeys", path: "/key-value-stores/{KvsARN}/keys", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFrontKeyValueStore {
    /// Returns a list of key value pairs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listKeysPaginator(
        _ input: ListKeysRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListKeysRequest, ListKeysResponse> {
        return .init(
            input: input,
            command: self.listKeys,
            inputKey: \ListKeysRequest.nextToken,
            outputKey: \ListKeysResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
