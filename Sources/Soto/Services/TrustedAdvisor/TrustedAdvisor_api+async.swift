//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension TrustedAdvisor {
    // MARK: Async API Calls

    /// Get a specific recommendation within an AWS Organizations organization. This API supports only prioritized recommendations.
    public func getOrganizationRecommendation(_ input: GetOrganizationRecommendationRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetOrganizationRecommendationResponse {
        return try await self.client.execute(operation: "GetOrganizationRecommendation", path: "/v1/organization-recommendations/{organizationRecommendationIdentifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Get a specific Recommendation
    public func getRecommendation(_ input: GetRecommendationRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetRecommendationResponse {
        return try await self.client.execute(operation: "GetRecommendation", path: "/v1/recommendations/{recommendationIdentifier}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List a filterable set of Checks
    public func listChecks(_ input: ListChecksRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListChecksResponse {
        return try await self.client.execute(operation: "ListChecks", path: "/v1/checks", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists the accounts that own the resources for an organization aggregate recommendation. This API only supports prioritized recommendations.
    public func listOrganizationRecommendationAccounts(_ input: ListOrganizationRecommendationAccountsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationRecommendationAccountsResponse {
        return try await self.client.execute(operation: "ListOrganizationRecommendationAccounts", path: "/v1/organization-recommendations/{organizationRecommendationIdentifier}/accounts", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List Resources of a Recommendation within an Organization. This API only supports prioritized recommendations.
    public func listOrganizationRecommendationResources(_ input: ListOrganizationRecommendationResourcesRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationRecommendationResourcesResponse {
        return try await self.client.execute(operation: "ListOrganizationRecommendationResources", path: "/v1/organization-recommendations/{organizationRecommendationIdentifier}/resources", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List a filterable set of Recommendations within an Organization. This API only supports prioritized recommendations.
    public func listOrganizationRecommendations(_ input: ListOrganizationRecommendationsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationRecommendationsResponse {
        return try await self.client.execute(operation: "ListOrganizationRecommendations", path: "/v1/organization-recommendations", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List Resources of a Recommendation
    public func listRecommendationResources(_ input: ListRecommendationResourcesRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListRecommendationResourcesResponse {
        return try await self.client.execute(operation: "ListRecommendationResources", path: "/v1/recommendations/{recommendationIdentifier}/resources", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List a filterable set of Recommendations
    public func listRecommendations(_ input: ListRecommendationsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListRecommendationsResponse {
        return try await self.client.execute(operation: "ListRecommendations", path: "/v1/recommendations", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Update the lifecyle of a Recommendation within an Organization. This API only supports prioritized recommendations.
    public func updateOrganizationRecommendationLifecycle(_ input: UpdateOrganizationRecommendationLifecycleRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "UpdateOrganizationRecommendationLifecycle", path: "/v1/organization-recommendations/{organizationRecommendationIdentifier}/lifecycle", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Update the lifecyle of a Recommendation. This API only supports prioritized recommendations.
    public func updateRecommendationLifecycle(_ input: UpdateRecommendationLifecycleRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws {
        return try await self.client.execute(operation: "UpdateRecommendationLifecycle", path: "/v1/recommendations/{recommendationIdentifier}/lifecycle", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension TrustedAdvisor {
    /// List a filterable set of Checks
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listChecksPaginator(
        _ input: ListChecksRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListChecksRequest, ListChecksResponse> {
        return .init(
            input: input,
            command: self.listChecks,
            inputKey: \ListChecksRequest.nextToken,
            outputKey: \ListChecksResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists the accounts that own the resources for an organization aggregate recommendation. This API only supports prioritized recommendations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOrganizationRecommendationAccountsPaginator(
        _ input: ListOrganizationRecommendationAccountsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOrganizationRecommendationAccountsRequest, ListOrganizationRecommendationAccountsResponse> {
        return .init(
            input: input,
            command: self.listOrganizationRecommendationAccounts,
            inputKey: \ListOrganizationRecommendationAccountsRequest.nextToken,
            outputKey: \ListOrganizationRecommendationAccountsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// List Resources of a Recommendation within an Organization. This API only supports prioritized recommendations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOrganizationRecommendationResourcesPaginator(
        _ input: ListOrganizationRecommendationResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOrganizationRecommendationResourcesRequest, ListOrganizationRecommendationResourcesResponse> {
        return .init(
            input: input,
            command: self.listOrganizationRecommendationResources,
            inputKey: \ListOrganizationRecommendationResourcesRequest.nextToken,
            outputKey: \ListOrganizationRecommendationResourcesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// List a filterable set of Recommendations within an Organization. This API only supports prioritized recommendations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOrganizationRecommendationsPaginator(
        _ input: ListOrganizationRecommendationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOrganizationRecommendationsRequest, ListOrganizationRecommendationsResponse> {
        return .init(
            input: input,
            command: self.listOrganizationRecommendations,
            inputKey: \ListOrganizationRecommendationsRequest.nextToken,
            outputKey: \ListOrganizationRecommendationsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// List Resources of a Recommendation
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listRecommendationResourcesPaginator(
        _ input: ListRecommendationResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListRecommendationResourcesRequest, ListRecommendationResourcesResponse> {
        return .init(
            input: input,
            command: self.listRecommendationResources,
            inputKey: \ListRecommendationResourcesRequest.nextToken,
            outputKey: \ListRecommendationResourcesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// List a filterable set of Recommendations
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listRecommendationsPaginator(
        _ input: ListRecommendationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListRecommendationsRequest, ListRecommendationsResponse> {
        return .init(
            input: input,
            command: self.listRecommendations,
            inputKey: \ListRecommendationsRequest.nextToken,
            outputKey: \ListRecommendationsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
